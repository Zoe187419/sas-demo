
 /*-------------------------------------------------------------------*/
 /* Extending SAS(R) Survival Analysis Techniques for Medical Research*/
 /*                        by Dr. Alan Cantor                         */
 /*       Copyright(c) 1996 by SAS Institute Inc., Cary, NC, USA      */
 /*                   SAS Publications order # 55504                  */
 /*                        ISBN 1-55544-954-9                         */
 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /* This material is provided "as is" by SAS Institute Inc.    There  */
 /* are no warranties, express or implied, as to merchantability or   */
 /* fitness for a particular purpose regarding the materials or code  */
 /* contained herein. The Institute is not responsible for errors     */
 /* in this material as it now exists or will exist, nor does the     */
 /* Institute provide technical support for it.                       */
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 /* Questions or problem reports concerning this material may be      */
 /* addressed to the author:                                          */
 /*                                                                   */
 /* SAS Institute Inc.                                                */
 /* Books by Users                                                    */
 /* Attn: Alan Cantor, Ph.D.                                          */
 /* SAS Campus Drive                                                  */
 /* Cary, NC   27513                                                  */
 /*                                                                   */
 /*                                                                   */
 /* If you prefer, you can send email to:  sasbbu@sas.com             */
 /* Use this for subject field: Comments for Alan Cantor              */
 /*                                                                   */
 /*-------------------------------------------------------------------*/

This file contains data sets, example code, and macro code used in the
book, "Extending SAS(R) Survival Analysis Techniques for Medical
Research" by Alan Cantor, Ph.D.  The file lists, in order,

-- data sets used in the book
-- example code used in the book
-- macros used in the book

*************************************************************************
*************************************************************************

DATA SETS USED IN THIS BOOK


***************************************************
/* The following data set is mentioned on page 71,*/ 
/* where it is used to produce output 3.2.        */
***************************************************


data breast;
    input @1 stage $3. @9 cens @17 years @33 agegrp $5.;
    cards;
        0       0.0465434634    80+
        0       8.3093771389    0-59
        0       7.0499657769    0-59
        0       2.2614647502    0-59
        0       0.3449691992    0-59
        0       0.4216290212    0-59
        0       0.0273785079    60-69
        0       2.2094455852    60-69
        0       3.5838466804    70-79
        0       0               70-79
        0       0.0164271047    70-79
        0       0.1533196441    70-79
        0       4.3066392882    70-79
        0       2.3627652293    70-79
        1       1.4976043806    80+
        1       0.4517453799    80+
0       0       8.1368925394    0-59
0       0       2.9185489391    0-59
0       0       5.7522245038    0-59
0       0       1.054072553     80+
0       0       1.9438740589    0-59
0       0       5.5359342916    0-59
0       0       5.0102669405    0-59
0       0       4.4982888433    0-59
0       0       2.4449007529    0-59
0       0       1.7850787132    0-59
0       0       6.7241615332    60-69
0       0       1.3305954825    60-69
0       0       0.1368925394    60-69
0       0       7.4332648871    70-79
0       0       2.1409993155    70-79
0       0       1.5660506502    80+
0       0       9.1498973306    0-59
0       0       6.9678302533    0-59
0       0       7.0554414784    0-59
0       0       6.6694045175    0-59
0       0       7.279945243     0-59
0       0       6.9240246407    0-59
0       1       5.5906913073    0-59
0       0       7.0746064339    0-59
0       0       7.1813826146    0-59
0       0       6.8473648186    0-59
0       0       6.6830937714    0-59
0       0       6.1409993155    0-59
0       0       5.7796030116    0-59
0       0       5.5441478439    0-59
0       0       5.0239561944    0-59
0       0       5.1745379877    0-59
0       0       5.6673511294    0-59
0       0       5.5003422313    0-59
0       0       5.5605749487    0-59
0       0       5.8836413415    0-59
0       0       5.3963039014    0-59
0       0       5.2156057495    0-59
0       0       4.9500342231    0-59
0       0       5.0349075975    0-59
0       0       5.492128679     0-59
0       0       4.900752909     0-59
0       0       4.9336071184    0-59
0       0       4.9363449692    0-59
0       0       2.2395619439    0-59
0       0       4.3668720055    0-59
0       0       4.4298425736    0-59
0       0       3.3785078713    0-59
0       0       3.8877481177    0-59
0       0       3.832991102     0-59
0       0       4.0109514031    0-59
0       0       4.4188911704    0-59
0       0       3.0280629706    0-59
0       0       4.3997262149    0-59
0       0       2.6611909651    0-59
0       0       3.9425051335    0-59
0       0       3.5509924709    0-59
0       0       4.0876112252    0-59
0       0       3.1403148528    0-59
0       0       3.0691307324    0-59
0       0       3.1019849418    0-59
0       0       2.8911704312    0-59
0       0       2.1629021218    0-59
0       0       2.3134839151    0-59
0       0       2.6967830253    0-59
0       0       2.2450376454    0-59
0       0       2.2450376454    0-59
0       0       1.5797399042    0-59
0       0       1.8945927447    0-59
0       0       1.8754277892    0-59
0       0       1.9247091034    0-59
0       0       1.3990417522    0-59
0       0       1.87816564      0-59
0       0       0.9582477755    0-59
0       0       0.8898015058    0-59
0       0       1.9055441478    0-59
0       0       1.3278576318    0-59
0       0       1.1143052704    0-59
0       0       1.3470225873    0-59
0       0       1.1718001369    0-59
0       0       0.9938398357    0-59
0       0       0.2874743326    0-59
0       0       0.1724845996    0-59
0       0       0.5201916496    0-59
0       0       0.4188911704    0-59
0       0       0.2409308693    0-59
0       0       0.4161533196    0-59
0       0       0.3805612594    0-59
0       0       0.3668720055    0-59
0       0       0.1861738535    0-59
0       0       0.205338809     0-59
0       0       0.3778234086    0-59
0       0       8.5174537988    0-59
0       0       3.5838466804    0-59
0       0       0.4298425736    0-59
0       0       6.3244353183    0-59
0       0       4.0848733744    0-59
0       0       4.5503080082    0-59
0       0       8.553045859     60-69
0       0       8.3258042437    60-69
0       0       7.5181382615    60-69
0       0       6.5133470226    60-69
0       0       6.9185489391    60-69
0       0       6.2176591376    60-69
0       0       6.2833675565    60-69
0       0       6.4120465435    60-69
0       0       5.9767282683    60-69
0       0       5.0349075975    60-69
0       0       5.0595482546    60-69
0       0       5.3004791239    60-69
0       0       5.1170431211    60-69
0       0       5.0513347023    60-69
0       0       4.9637234771    60-69
0       0       4.3915126626    60-69
0       0       3.9370294319    60-69
0       0       4.5804243669    60-69
0       0       3.6741957563    60-69
0       0       3.4798083504    60-69
0       0       4.5065023956    60-69
0       0       2.9295003422    60-69
0       0       3.0006844627    60-69
0       1       1.3360711841    60-69
0       0       3.5290896646    60-69
0       0       2.9158110883    60-69
0       0       2.7953456537    60-69
0       0       1.9739904175    60-69
0       0       2.3299110198    60-69
0       0       2.0150581793    60-69
0       0       2.1163586585    60-69
0       0       1.7850787132    60-69
0       0       1.582477755     60-69
0       0       1.6454483231    60-69
0       0       1.2292950034    60-69
0       0       1.0568104038    60-69
0       0       1.5578370979    60-69
0       0       1.1416837782    60-69
0       0       1.1498973306    60-69
0       0       1.106091718     60-69
0       0       0.93908282      60-69
0       0       1.1033538672    60-69
0       0       0.0793976728    60-69
0       0       0.3394934976    60-69
0       0       0.3093771389    60-69
0       0       0.1368925394    60-69
0       0       0.4134154689    60-69
0       0       0.295687885     60-69
0       0       0.4024640657    60-69
0       0       7.1676933607    60-69
0       0       6.2997946612    60-69
0       0       3.485284052     60-69
0       1       2.2149212868    60-69
0       0       1.7221081451    60-69
0       0       8.4955509925    70-79
0       0       8.0821355236    70-79
0       1       5.6016427105    70-79
0       0       6.855578371     70-79
0       0       7.4004106776    70-79
0       0       6.507871321     70-79
0       0       6.3299110198    70-79
0       0       5.9520876112    70-79
0       0       5.4428473648    70-79
0       0       6.2286105407    70-79
0       0       5.1279945243    70-79
0       0       4.295687885     70-79
0       0       4.0273785079    70-79
0       0       4.3449691992    70-79
0       0       4.6105407255    70-79
0       0       3.2553045859    70-79
0       0       3.1567419576    70-79
0       0       3.2470910335    70-79
0       0       2.6776180698    70-79
0       0       2.7049965777    70-79
0       0       2.546201232     70-79
0       0       2.1793292266    70-79
0       0       1.8754277892    70-79
0       0       1.5167693361    70-79
0       0       1.1663244353    70-79
0       0       1.0266940452    70-79
0       0       0.9199178645    70-79
0       0       1.1663244353    70-79
0       0       0.2108145106    70-79
0       0       6.9404517454    80+
0       0       5.3771389459    80+
0       0       4.9281314168    80+
0       0       2.160164271     80+
0       0       0.476386037     80+
0       0       0.2080766598    80+
I       0       5.8370978782    0-59
I       0       1.1909650924    0-59
I       0       0.1861738535    70-79
I       0       4.3258042437    80+
I       0       6.173853525     0-59
I       0       0.3997262149    0-59
I       0       6.1902806297    70-79
I       0       4.4052019165    0-59
I       0       1.2375085558    0-59
I       1       4.3039014374    0-59
I       0       5.8288843258    0-59
I       1       3.5263518138    0-59
I       0       0.9637234771    0-59
I       0       6.2094455852    60-69
I       0       3.909650924     60-69
I       0       7.7399041752    60-69
I       1       2.4832306639    60-69
I       0       1.4483230664    60-69
I       0       0.2327173169    70-79
I       0       5.0951403149    70-79
I       0       0.1122518823    70-79
I       0       8.1451060917    0-59
I       0       7.9452429843    0-59
I       1       4.3696098563    0-59
I       0       1.9958932238    0-59
I       1       1.9329226557    0-59
I       0       8.0821355236    0-59
I       0       6.6639288159    0-59
I       0       6.9815195072    0-59
I       0       6.6858316222    0-59
I       0       6.5434633812    0-59
I       0       1.4592744695    0-59
I       0       6.7214236824    0-59
I       0       5.4592744695    0-59
I       0       5.8480492813    0-59
I       0       5.620807666     0-59
I       0       4.6105407255    0-59
I       0       4.7255304586    0-59
I       0       4.4106776181    0-59
I       0       4.6023271732    0-59
I       0       4.4709103354    0-59
I       0       3.9151266256    0-59
I       1       3.7234770705    0-59
I       0       4.4079397673    0-59
I       0       4.2765229295    0-59
I       0       3.6331279945    0-59
I       0       3.2470910335    0-59
I       0       2.6228610541    0-59
I       0       3.0965092402    0-59
I       0       2.9404517454    0-59
I       0       3.0773442847    0-59
I       0       2.9130732375    0-59
I       0       2.3983572895    0-59
I       0       2.0314852841    0-59
I       0       1.7275838467    0-59
I       0       2.0287474333    0-59
I       0       2.0095824778    0-59
I       0       2.0862422998    0-59
I       0       2.5544147844    0-59
I       0       1.1197809719    0-59
I       0       1.2156057495    0-59
I       0       1.2073921971    0-59
I       0       0.7775496235    0-59
I       0       1.4592744695    0-59
I       0       0.9144421629    0-59
I       0       0.3230663929    0-59
I       0       1.0130047912    0-59
I       0       0.2327173169    0-59
I       0       0.5119780972    0-59
I       0       0.386036961     0-59
I       0       0.3449691992    0-59
I       0       0.2929500342    0-59
I       0       0.3832991102    0-59
I       0       0.3230663929    0-59
I       0       0.2874743326    0-59
I       0       0.4572210815    0-59
I       0       0.3258042437    0-59
I       0       0.2929500342    0-59
I       0       0.4134154689    0-59
I       0       7.4277891855    0-59
I       0       6.6721423682    0-59
I       0       7.8932238193    0-59
I       0       6.9240246407    0-59
I       0       6.984257358     0-59
I       0       6.1683778234    0-59
I       0       6.3901437372    0-59
I       0       6.9349760438    0-59
I       0       5.7056810404    0-59
I       0       5.7467488022    0-59
I       0       5.3442847365    0-59
I       0       5.568788501     0-59
I       0       5.2511978097    0-59
I       0       5.3415468857    0-59
I       0       3.3839835729    0-59
I       0       4.1834360027    0-59
I       0       3.356605065     0-59
I       0       3.4551676934    0-59
I       0       3.0663928816    0-59
I       0       2.9212867899    0-59
I       0       2.71321013      0-59
I       0       2.4859685147    0-59
I       0       2.5407255305    0-59
I       0       2.855578371     0-59
I       0       3.0088980151    0-59
I       0       1.7823408624    0-59
I       0       1.5934291581    0-59
I       0       0.1396303901    0-59
I       0       1.5359342916    0-59
I       0       1.1115674196    0-59
I       0       1.9438740589    0-59
I       0       0.8624229979    0-59
I       0       1.4976043806    0-59
I       0       1.0513347023    0-59
I       0       1.054072553     0-59
I       0       0.4955509925    0-59
I       0       0.2327173169    0-59
I       0       0.1697467488    0-59
I       0       0.386036961     0-59
I       0       0.2874743326    0-59
I       0       0.372347707     0-59
I       0       0.3696098563    0-59
I       0       0.3011635866    0-59
I       0       0.3641341547    0-59
I       0       0.4544832307    0-59
I       0       8.2628336756    0-59
I       0       8.5119780972    0-59
I       1       5.1197809719    0-59
I       0       7.819301848     0-59
I       0       7.8740588638    0-59
I       0       7.0554414784    0-59
I       0       6.9678302533    0-59
I       0       8.0438056126    0-59
I       0       7.4195756331    0-59
I       0       7.5865845311    0-59
I       0       7.0527036277    0-59
I       0       6.7816563997    0-59
I       0       6.4257357974    0-59
I       0       5.5770020534    0-59
I       0       6.135523614     0-59
I       0       5.6700889802    0-59
I       0       5.4483230664    0-59
I       0       5.054072553     0-59
I       0       5.4072553046    0-59
I       0       4.8323066393    0-59
I       1       2.5516769336    0-59
I       0       4.8624229979    0-59
I       0       5.1115674196    0-59
I       0       4.5968514716    0-59
I       0       2.8199863107    0-59
I       0       5.0184804928    0-59
I       0       4.0136892539    0-59
I       0       4.810403833     0-59
I       0       4.0438056126    0-59
I       0       4.1368925394    0-59
I       0       4.2409308693    0-59
I       0       4.0492813142    0-59
I       0       3.1841204654    0-59
I       0       3.1868583162    0-59
I       0       3.0472279261    0-59
I       1       1.4264202601    0-59
I       0       2.4339493498    0-59
I       0       3.0444900753    0-59
I       0       2.7515400411    0-59
I       0       2.4476386037    0-59
I       0       2.3901437372    0-59
I       0       2.2450376454    0-59
I       0       2.6201232033    0-59
I       0       2.71321013      0-59
I       0       2.3134839151    0-59
I       0       2.1136208077    0-59
I       0       2.507871321     0-59
I       0       2.0396988364    0-59
I       0       1.8425735797    0-59
I       0       2.2039698836    0-59
I       0       2.2970568104    0-59
I       0       1.787816564     0-59
I       0       1.8015058179    0-59
I       0       2.0670773443    0-59
I       0       1.8945927447    0-59
I       0       2.1683778234    0-59
I       0       1.18275154      0-59
I       0       1.9520876112    0-59
I       0       1.9520876112    0-59
I       0       1.5770020534    0-59
I       0       1.1663244353    0-59
I       0       1.1362080767    0-59
I       0       1.1088295688    0-59
I       0       1.1307323751    0-59
I       0       1.3497604381    0-59
I       0       1.4428473648    0-59
I       0       1.0212183436    0-59
I       0       1.0102669405    0-59
I       0       0.3312799452    0-59
I       0       0.8678986995    0-59
I       0       0.2984257358    0-59
I       0       0.7501711157    0-59
I       0       0.4955509925    0-59
I       0       0.3011635866    0-59
I       0       0.3641341547    0-59
I       0       0.2792607803    0-59
I       0       0.295687885     0-59
I       0       0.7419575633    0-59
I       0       0.2436687201    0-59
I       0       0.3942505133    0-59
I       0       0.3230663929    0-59
I       0       0.3449691992    0-59
I       0       0.2929500342    0-59
I       0       0.3258042437    0-59
I       0       7.961670089     0-59
I       0       6.9404517454    0-59
I       0       6.4394250513    0-59
I       0       6.6064339493    0-59
I       0       0.8952772074    0-59
I       0       4.205338809     0-59
I       0       6.0561259411    0-59
I       0       5.5277207392    0-59
I       0       6.4394250513    0-59
I       0       5.9000684463    0-59
I       0       5.5961670089    0-59
I       0       5.9603011636    0-59
I       0       5.8507871321    0-59
I       0       5.7549623546    0-59
I       0       5.6919917864    0-59
I       0       5.9575633128    0-59
I       0       5.28678987      0-59
I       0       5.7741273101    0-59
I       1       4.7008898015    0-59
I       0       4.8706365503    0-59
I       0       5.3169062286    0-59
I       1       3.0472279261    0-59
I       0       5.0047912389    0-59
I       1       4.9993155373    0-59
I       0       5.1115674196    0-59
I       0       5.0814510609    0-59
I       0       4.7885010267    0-59
I       0       4.6324435318    0-59
I       0       4.2792607803    0-59
I       0       4.6488706366    0-59
I       0       4.6214921287    0-59
I       0       4.3832991102    0-59
I       1       4.6735112936    0-59
I       0       4.1368925394    0-59
I       0       4.7173169062    0-59
I       0       4.6954140999    0-59
I       0       4.1889117043    0-59
I       0       4.2272416153    0-59
I       0       4.34770705      0-59
I       0       4.0164271047    0-59
I       0       4.2108145106    0-59
I       0       4.3997262149    0-59
I       0       2.9869952088    0-59
I       0       3.3155373032    0-59
I       0       3.5920602327    0-59
I       0       3.4743326489    0-59
I       0       2.855578371     0-59
I       0       2.9295003422    0-59
I       0       2.1245722108    0-59
I       0       2.1190965092    0-59
I       0       2.1054072553    0-59
I       0       0.2299794661    0-59
I       0       2.135523614     0-59
I       0       2.1793292266    0-59
I       0       2.0342231348    0-59
I       0       2.3244353183    0-59
I       0       1.9904175222    0-59
I       0       2.3134839151    0-59
I       0       2.2149212868    0-59
I       1       1.3004791239    0-59
I       0       2.1136208077    0-59
I       0       1.6783025325    0-59
I       0       1.1252566735    0-59
I       0       1.5578370979    0-59
I       0       1.0184804928    0-59
I       0       0.6160164271    0-59
I       0       1.1033538672    0-59
I       0       0.8898015058    0-59
I       0       1.3004791239    0-59
I       0       0.3285420945    0-59
I       0       1.0869267625    0-59
I       0       1.1170431211    0-59
I       0       0.34770705      0-59
I       0       1.3880903491    0-59
I       0       0.2327173169    0-59
I       0       0.3641341547    0-59
I       0       0.4024640657    0-59
I       0       0.34770705      0-59
I       0       0.3148528405    0-59
I       0       0.3832991102    0-59
I       0       6.3819301848    0-59
I       0       8.7748117728    60-69
I       0       8.2902121834    60-69
I       0       7.8767967146    60-69
I       1       4.5256673511    60-69
I       0       8.3367556468    60-69
I       0       8.219028063     60-69
I       0       6.546201232     60-69
I       0       6.1683778234    60-69
I       0       6.1409993155    60-69
I       0       6.1437371663    60-69
I       0       6.2778918549    60-69
I       0       5.4757015743    60-69
I       0       5.5058179329    60-69
I       0       4.9911019849    60-69
I       0       4.7501711157    60-69
I       0       4.6625598905    60-69
I       0       5.5496235455    60-69
I       0       5.2292950034    60-69
I       0       3.7727583847    60-69
I       0       4.219028063     60-69
I       0       4.5119780972    60-69
I       0       2.9404517454    60-69
I       0       3.2005475702    60-69
I       0       3.4825462012    60-69
I       0       3.1211498973    60-69
I       0       3.2553045859    60-69
I       0       3.1403148528    60-69
I       0       2.8008213552    60-69
I       0       2.9486652977    60-69
I       0       3.1622176591    60-69
I       0       3.2005475702    60-69
I       0       2.9924709103    60-69
I       0       2.5626283368    60-69
I       0       2.9130732375    60-69
I       0       2.4120465435    60-69
I       0       1.8863791923    60-69
I       0       1.4784394251    60-69
I       0       1.1718001369    60-69
I       0       1.4318959617    60-69
I       0       1.5003422313    60-69
I       0       1.0650239562    60-69
I       0       0.8651608487    60-69
I       0       1.1991786448    60-69
I       0       0.7830253251    60-69
I       0       0.2108145106    60-69
I       0       0.3696098563    60-69
I       0       0.3449691992    60-69
I       0       0.2655715264    60-69
I       0       0.5366187543    60-69
I       0       0.4681724846    60-69
I       0       7.8083504449    60-69
I       0       7.7891854894    60-69
I       0       6.8090349076    60-69
I       0       0.9719370294    60-69
I       0       6.8227241615    60-69
I       0       5.0787132101    60-69
I       0       5.106091718     60-69
I       0       5.158110883     60-69
I       0       4.3832991102    60-69
I       0       4.2765229295    60-69
I       0       4.038329911     60-69
I       0       3.9206023272    60-69
I       0       4.0438056126    60-69
I       0       3.7453798768    60-69
I       0       3.3976728268    60-69
I       0       2.6803559206    60-69
I       0       3.1786447639    60-69
I       0       2.6475017112    60-69
I       0       2.0561259411    60-69
I       0       2.045174538     60-69
I       0       2.1464750171    60-69
I       0       1.2813141684    60-69
I       0       1.401779603     60-69
I       0       1.6837782341    60-69
I       0       1.1909650924    60-69
I       0       0.8049281314    60-69
I       0       0.6187542779    60-69
I       0       0.2245037645    60-69
I       0       0.0629705681    60-69
I       0       0.3121149897    60-69
I       0       0.3011635866    60-69
I       1       6.8473648186    60-69
I       0       7.6167008898    60-69
I       0       7.6796714579    60-69
I       0       7.5920602327    60-69
I       0       7.5290896646    60-69
I       0       7.4934976044    60-69
I       0       7.5208761123    60-69
I       0       7.0198494182    60-69
I       0       7.0034223135    60-69
I       0       6.6338124572    60-69
I       0       6.6091718001    60-69
I       0       6.7597535934    60-69
I       0       6.8583162218    60-69
I       0       6.71321013      60-69
I       0       5.8836413415    60-69
I       0       6.4229979466    60-69
I       0       6.2532511978    60-69
I       0       5.8042436687    60-69
I       0       5.6481861739    60-69
I       0       5.0102669405    60-69
I       0       6.0232717317    60-69
I       0       4.9418206708    60-69
I       1       3.9370294319    60-69
I       0       5.158110883     60-69
I       0       4.3915126626    60-69
I       0       4.1971252567    60-69
I       0       3.9206023272    60-69
I       1       2.8966461328    60-69
I       0       3.4880219028    60-69
I       0       3.5290896646    60-69
I       0       3.5674195756    60-69
I       0       3.5975359343    60-69
I       0       3.0691307324    60-69
I       0       3.0061601643    60-69
I       0       3.1238877481    60-69
I       0       2.5516769336    60-69
I       0       1.8288843258    60-69
I       0       2.1437371663    60-69
I       0       2.0150581793    60-69
I       0       1.4893908282    60-69
I       0       1.234770705     60-69
I       0       0.810403833     60-69
I       0       1.1143052704    60-69
I       0       1.0841889117    60-69
I       0       1.0869267625    60-69
I       0       1.1663244353    60-69
I       0       0.3613963039    60-69
I       0       0.2737850787    60-69
I       0       0.3504449008    60-69
I       0       0.3011635866    60-69
I       0       0.2026009582    60-69
I       0       0.3586584531    60-69
I       0       0.4188911704    60-69
I       0       0.3887748118    60-69
I       0       0.3449691992    60-69
I       0       0.3230663929    60-69
I       0       7.2689938398    60-69
I       0       7.6057494867    60-69
I       1       4.9117043121    60-69
I       1       7.1978097194    60-69
I       0       6.8829568789    60-69
I       0       6.431211499     60-69
I       0       6.4229979466    60-69
I       0       6.5215605749    60-69
I       0       6.3983572895    60-69
I       0       5.2429842574    60-69
I       0       5.0431211499    60-69
I       0       5.2511978097    60-69
I       0       5.0924024641    60-69
I       0       4.6926762491    60-69
I       0       3.7152635181    60-69
I       0       3.8740588638    60-69
I       0       3.2553045859    60-69
I       0       3.1019849418    60-69
I       0       3.2197125257    60-69
I       0       2.1054072553    60-69
I       0       2.1108829569    60-69
I       0       1.8590006845    60-69
I       0       2.0999315537    60-69
I       0       2.2587268994    60-69
I       0       2.2450376454    60-69
I       0       2.0752908966    60-69
I       0       0.2847364819    60-69
I       0       1.0924024641    60-69
I       0       1.3497604381    60-69
I       0       1.1006160164    60-69
I       0       0.8076659822    60-69
I       0       0.8323066393    60-69
I       0       0.3066392882    60-69
I       0       0.3066392882    60-69
I       0       0.2737850787    60-69
I       0       0.3778234086    60-69
I       0       0.3312799452    60-69
I       0       8.1368925394    70-79
I       0       8.2737850787    70-79
I       0       8.3504449008    70-79
I       0       5.6700889802    70-79
I       0       5.0431211499    70-79
I       0       5.3059548255    70-79
I       0       5.1690622861    70-79
I       0       5.0978781656    70-79
I       0       3.4496919918    70-79
I       0       3.9753593429    70-79
I       0       4.4845995893    70-79
I       0       4.4490075291    70-79
I       0       3.4770704997    70-79
I       0       3.4880219028    70-79
I       0       2.4038329911    70-79
I       0       1.9685147159    70-79
I       0       2.392881588     70-79
I       0       2.2833675565    70-79
I       0       1.7084188912    70-79
I       0       2.1409993155    70-79
I       0       1.1362080767    70-79
I       0       1.1279945243    70-79
I       0       0.9911019849    70-79
I       0       1.1882272416    70-79
I       0       1.2484599589    70-79
I       0       0.0602327173    70-79
I       0       0.219028063     70-79
I       0       0.334017796     70-79
I       0       0.34770705      70-79
I       0       0.3367556468    70-79
I       0       0.2409308693    70-79
I       1       5.3196440794    70-79
I       0       5.9055441478    70-79
I       0       5.9383983573    70-79
I       0       4.9226557153    70-79
I       0       5.2977412731    70-79
I       0       3.1759069131    70-79
I       0       2.5845311431    70-79
I       0       2.0123203285    70-79
I       0       1.3388090349    70-79
I       0       1.1279945243    70-79
I       0       1.4209445585    70-79
I       0       0.2847364819    70-79
I       0       0               70-79
I       0       7.7125256674    70-79
I       0       6.5270362765    70-79
I       0       6.8637919233    70-79
I       0       7.0308008214    70-79
I       0       0.2546201232    70-79
I       0       6.0479123888    70-79
I       0       6.1902806297    70-79
I       0       6.1930184805    70-79
I       0       5.7604380561    70-79
I       0       5.4948665298    70-79
I       1       2.0643394935    70-79
I       0       4.9719370294    70-79
I       0       3.6824093087    70-79
I       0       3.022587269     70-79
I       0       3.2963723477    70-79
I       0       2.7761806982    70-79
I       1       2.2149212868    70-79
I       0       2.8610540726    70-79
I       0       3.1293634497    70-79
I       0       2.0479123888    70-79
I       0       1.9575633128    70-79
I       0       1.7932922656    70-79
I       0       1.2840520192    70-79
I       0       1.2703627652    70-79
I       0       0.8323066393    70-79
I       0       0.9527720739    70-79
I       0       1.1718001369    70-79
I       0       0.334017796     70-79
I       0       0.3258042437    70-79
I       0       0.372347707     70-79
I       0       0.2929500342    70-79
I       0       0.3449691992    70-79
I       0       7.9671457906    70-79
I       1       6.2970568104    70-79
I       0       5.4866529774    70-79
I       0       5.3798767967    70-79
I       0       5.311430527     70-79
I       0       4.5065023956    70-79
I       1       2.3299110198    70-79
I       0       4.1642710472    70-79
I       0       4.514715948     70-79
I       0       3.8165639973    70-79
I       0       3.3976728268    70-79
I       0       4.0438056126    70-79
I       0       1.1115674196    70-79
I       0       0.0793976728    70-79
I       0       0.3312799452    70-79
I       1       4.4188911704    80+
I       1       1.4154688569    80+
I       1       3.2306639288    80+
I       0       2.0342231348    80+
I       0       1.106091718     80+
I       0       0.900752909     80+
I       0       0.3258042437    80+
I       0       0.3969883641    80+
I       1       3.6468172485    80+
I       0       5.6180698152    80+
I       0       3.4880219028    80+
I       0       3.5290896646    80+
I       0       2.0150581793    80+
I       0       1.1663244353    80+
I       0       0.34770705      80+
I       0       0.1916495551    80+
I       1       0.9555099247    80+
I       1       6.71321013      80+
I       1       3.5044490075    80+
I       1       0.7145790554    80+
I       0       3.318275154     80+
I       0       2.2395619439    80+
I       0       0.8377823409    80+
I       0       0.1533196441    80+
I       0       0.2464065708    80+
I       1       1.2813141684    80+
I       1       1.3963039014    80+
I       0       1.1663244353    80+
I       0       1.1362080767    80+
II      0       6.5215605749    0-59
II      0       5.6043805613    0-59
II      0       2.3189596167    0-59
II      1       4.7474332649    0-59
II      0       5.3716632444    0-59
II      1       1.5852156057    0-59
II      0       2.6091718001    0-59
II      0       5.8726899384    0-59
II      1       1.5742642026    0-59
II      1       3.2525667351    0-59
II      0       3.4305270363    0-59
II      0       0.7282683094    0-59
II      0       3.2197125257    0-59
II      1       1.9986310746    0-59
II      0       2.5325119781    0-59
II      0       0.3997262149    0-59
II      0       7.2635181383    60-69
II      1       1.0513347023    60-69
II      0       2.8008213552    60-69
II      0       3.4058863792    60-69
II      0       1.3552361396    60-69
II      1       1.1991786448    70-79
II      0       0.3696098563    70-79
II      0       1.4154688569    70-79
II      0       1.0759753593    0-59
II      0       0.1122518823    0-59
II      0       4.3915126626    60-69
II      0       8.4353182752    0-59
II      0       0.3148528405    0-59
II      0       6.160164271     0-59
II      0       4.2327173169    0-59
II      0       1.9055441478    0-59
II      0       0.424366872     0-59
II      0       3.2361396304    0-59
II      1       1.5222450376    0-59
II      0       0.7419575633    0-59
II      0       0.424366872     60-69
II      0       5.311430527     60-69
II      0       5.7467488022    60-69
II      0       0.34770705      70-79
II      0       8.6269678303    0-59
II      1       5.3497604381    0-59
II      1       1.8809034908    0-59
II      0       7.8384668036    0-59
II      0       8.5941136208    0-59
II      1       3.1978097194    0-59
II      1       5.2785763176    0-59
II      1       3.2060232717    0-59
II      1       2.3271731691    0-59
II      0       7.6112251882    0-59
II      0       7.0335386721    0-59
II      1       1.3333333333    0-59
II      1       6.4914442163    0-59
II      1       1.4236824093    0-59
II      0       6.7241615332    0-59
II      1       2.2450376454    0-59
II      0       6.0780287474    0-59
II      0       5.5003422313    0-59
II      1       1.5797399042    0-59
II      1       2.3956194387    0-59
II      0       4.8213552361    0-59
II      0       5.0595482546    0-59
II      1       4.501026694     0-59
II      0       5.015742642     0-59
II      0       3.5044490075    0-59
II      0       4.5366187543    0-59
II      0       3.8083504449    0-59
II      0       3.832991102     0-59
II      0       3.6769336071    0-59
II      0       3.1622176591    0-59
II      0       2.2340862423    0-59
II      0       2.1656399726    0-59
II      0       2.2915811088    0-59
II      1       2.5516769336    0-59
II      0       2.302532512     0-59
II      0       2.2806297057    0-59
II      0       2.2039698836    0-59
II      0       1.8179329227    0-59
II      0       1.6153319644    0-59
II      1       1.8343600274    0-59
II      0       1.3442847365    0-59
II      0       0.0711841205    0-59
II      0       1.2840520192    0-59
II      0       0.977412731     0-59
II      0       1.1006160164    0-59
II      0       0.2765229295    0-59
II      0       0.7638603696    0-59
II      0       0.8186173854    0-59
II      0       0.295687885     0-59
II      0       0.3531827515    0-59
II      0       0.3504449008    0-59
II      0       0.1642710472    0-59
II      0       6.4093086927    0-59
II      0       5.1143052704    0-59
II      1       0.514715948     0-59
II      0       4.4271047228    0-59
II      0       5.0403832991    0-59
II      0       5.0595482546    0-59
II      0       4.0793976728    0-59
II      0       3.8548939083    0-59
II      0       4.2765229295    0-59
II      0       3.8357289528    0-59
II      0       3.5509924709    0-59
II      0       3.2525667351    0-59
II      0       4.0219028063    0-59
II      0       2.8528405202    0-59
II      0       3.2772073922    0-59
II      0       2.5407255305    0-59
II      0       2.5927446954    0-59
II      0       2.2724161533    0-59
II      0       2.6502395619    0-59
II      0       1.2457221081    0-59
II      1       1.9192334018    0-59
II      0       1.4209445585    0-59
II      0       0.4736481862    0-59
II      0       0.4791238877    0-59
II      1       2.5571526352    0-59
II      1       6.945927447     0-59
II      0       7.0882956879    0-59
II      0       7.4195756331    0-59
II      0       6.5927446954    0-59
II      0       6.1984941821    0-59
II      0       6.0123203285    0-59
II      0       6.0643394935    0-59
II      0       6.3846680356    0-59
II      0       5.8316221766    0-59
II      0       5.3853524983    0-59
II      0       5.7412731006    0-59
II      0       5.0595482546    0-59
II      0       5.311430527     0-59
II      0       4.6160164271    0-59
II      0       4.8843258042    0-59
II      0       4.3696098563    0-59
II      1       2.5763175907    0-59
II      0       3.8877481177    0-59
II      0       3.3045859001    0-59
II      1       3.8877481177    0-59
II      0       4.1122518823    0-59
II      0       2.8829568789    0-59
II      0       4.0164271047    0-59
II      1       3.5044490075    0-59
II      0       4.128678987     0-59
II      0       1.18275154      0-59
II      0       3.2197125257    0-59
II      0       3.2525667351    0-59
II      0       3.4305270363    0-59
II      0       3.1293634497    0-59
II      0       3.1403148528    0-59
II      0       2.8747433265    0-59
II      0       2.6803559206    0-59
II      0       3.1704312115    0-59
II      1       1.4893908282    0-59
II      0       2.3983572895    0-59
II      1       1.3853524983    0-59
II      0       2.4065708419    0-59
II      0       2.2915811088    0-59
II      0       3.947980835     0-59
II      0       2.8884325804    0-59
II      0       1.9603011636    0-59
II      0       2.1382614648    0-59
II      0       2.2587268994    0-59
II      0       1.5277207392    0-59
II      0       2.4859685147    0-59
II      0       1.8069815195    0-59
II      0       1.2676249144    0-59
II      0       1.4373716632    0-59
II      0       1.1416837782    0-59
II      0       1.1416837782    0-59
II      0       0.6516084873    0-59
II      0       1.3333333333    0-59
II      0       0.3613963039    0-59
II      0       1.28678987      0-59
II      0       1.0924024641    0-59
II      0       1.2840520192    0-59
II      0       1.2813141684    0-59
II      0       0.3559206023    0-59
II      0       1.1115674196    0-59
II      0       0.424366872     0-59
II      0       1.144421629     0-59
II      0       0.2765229295    0-59
II      0       0.3805612594    0-59
II      0       0.3668720055    0-59
II      0       0.3121149897    0-59
II      0       0.3613963039    0-59
II      0       0.4435318275    0-59
II      0       0.4435318275    0-59
II      0       0.34770705      0-59
II      0       0.4791238877    0-59
II      0       0.2628336756    0-59
II      0       0.4490075291    0-59
II      0       0.2819986311    0-59
II      0       7.1704312115    0-59
II      1       1.2238193018    0-59
II      1       5.5468856947    0-59
II      0       7.7180013689    0-59
II      1       3.4058863792    0-59
II      1       0.93908282      0-59
II      0       7.1786447639    0-59
II      0       5.1197809719    0-59
II      0       6.9267624914    0-59
II      1       3.6577686516    0-59
II      0       6.9815195072    0-59
II      1       2.4640657084    0-59
II      1       1.735797399     0-59
II      0       4.7529089665    0-59
II      0       6.2395619439    0-59
II      0       6.5626283368    0-59
II      1       3.5564681725    0-59
II      1       2.7789185489    0-59
II      0       5.6755646817    0-59
II      0       6.3271731691    0-59
II      0       5.5578370979    0-59
II      0       6.417522245     0-59
II      0       5.954825462     0-59
II      1       3.4113620808    0-59
II      0       5.8809034908    0-59
II      1       3.5783709788    0-59
II      1       0.7091033539    0-59
II      1       2.2861054073    0-59
II      1       0.9609856263    0-59
II      1       6.045174538     0-59
II      0       5.5633127995    0-59
II      0       5.6344969199    0-59
II      0       2.8062970568    0-59
II      0       6.0150581793    0-59
II      1       4.9801505818    0-59
II      0       5.7686516085    0-59
II      0       4.720054757     0-59
II      1       5.5633127995    0-59
II      1       2.8610540726    0-59
II      1       5.2238193018    0-59
II      0       5.0212183436    0-59
II      0       4.7939767283    0-59
II      0       5.4209445585    0-59
II      0       2.6557152635    0-59
II      0       5.067761807     0-59
II      1       2.1629021218    0-59
II      0       4.6981519507    0-59
II      0       4.9993155373    0-59
II      0       4.3394934976    0-59
II      0       4.3915126626    0-59
II      0       4.6379192334    0-59
II      0       4.7611225188    0-59
II      1       2.2970568104    0-59
II      1       1.6810403833    0-59
II      1       1.8370978782    0-59
II      1       0.7611225188    0-59
II      0       3.9780971937    0-59
II      0       3.794661191     0-59
II      0       2.6858316222    0-59
II      1       3.2361396304    0-59
II      0       3.8904859685    0-59
II      0       4.4380561259    0-59
II      0       3.9397672827    0-59
II      0       4.1889117043    0-59
II      0       3.3073237509    0-59
II      0       3.6468172485    0-59
II      0       3.9507186858    0-59
II      0       3.3483915127    0-59
II      0       3.446954141     0-59
II      0       2.6064339493    0-59
II      0       3.3620807666    0-59
II      0       3.6605065024    0-59
II      0       3.1704312115    0-59
II      0       3.3210130048    0-59
II      0       3.0061601643    0-59
II      0       3.1101984942    0-59
II      1       1.196440794     0-59
II      0       2.81724846      0-59
II      0       2.893908282     0-59
II      0       2.6338124572    0-59
II      0       2.7843942505    0-59
II      0       2.8062970568    0-59
II      0       2.2203969884    0-59
II      0       3.1375770021    0-59
II      0       2.6967830253    0-59
II      0       2.7159479808    0-59
II      0       2.507871321     0-59
II      0       2.0287474333    0-59
II      0       2.9733059548    0-59
II      0       2.1875427789    0-59
II      0       2.1464750171    0-59
II      1       2.1327857632    0-59
II      0       2.379192334     0-59
II      0       2.7488021903    0-59
II      0       2.3983572895    0-59
II      0       1.9301848049    0-59
II      1       1.2648870637    0-59
II      0       2.0889801506    0-59
II      0       2.1081451061    0-59
II      0       1.9520876112    0-59
II      0       3.0581793292    0-59
II      0       2.0506502396    0-59
II      1       0.4709103354    0-59
II      0       2.0205338809    0-59
II      0       0.3531827515    0-59
II      0       2.1245722108    0-59
II      0       2.3600273785    0-59
II      0       2.0041067762    0-59
II      0       1.8562628337    0-59
II      0       1.8945927447    0-59
II      1       1.3059548255    0-59
II      0       1.3963039014    0-59
II      0       1.2840520192    0-59
II      0       1.3661875428    0-59
II      0       1.3169062286    0-59
II      0       1.5222450376    0-59
II      0       0.9883641342    0-59
II      1       0.720054757     0-59
II      0       1.7713894593    0-59
II      0       1.1991786448    0-59
II      0       1.0924024641    0-59
II      0       1.8836413415    0-59
II      0       1.1334702259    0-59
II      0       1.0376454483    0-59
II      1       0.6652977413    0-59
II      0       1.3470225873    0-59
II      0       1.3059548255    0-59
II      0       1.1307323751    0-59
II      0       1.3963039014    0-59
II      0       1.0978781656    0-59
II      0       1.2648870637    0-59
II      0       0.7939767283    0-59
II      0       1.3689253936    0-59
II      0       1.0759753593    0-59
II      0       0.9993155373    0-59
II      0       1.2950034223    0-59
II      0       0.7501711157    0-59
II      0       1.6317590691    0-59
II      1       0.9555099247    0-59
II      0       0.3285420945    0-59
II      0       1.7248459959    0-59
II      0       1.1334702259    0-59
II      0       1.2648870637    0-59
II      0       1.3880903491    0-59
II      0       1.1937029432    0-59
II      0       0.6488706366    0-59
II      0       0.8569472964    0-59
II      0       1.0704996578    0-59
II      0       0.3367556468    0-59
II      0       0.3778234086    0-59
II      0       0.2710472279    0-59
II      0       0.2381930185    0-59
II      0       0.5722108145    0-59
II      0       0.9226557153    0-59
II      0       0.4407939767    0-59
II      0       0.4216290212    0-59
II      0       0.5393566051    0-59
II      0       0.1697467488    0-59
II      0       0.3449691992    0-59
II      0       0.3641341547    0-59
II      0       0.4462696783    0-59
II      0       0.5804243669    0-59
II      0       0.5585215606    0-59
II      0       1.9301848049    0-59
II      0       6.7789185489    0-59
II      0       5.2484599589    0-59
II      0       8.6954140999    60-69
II      0       8.2436687201    60-69
II      0       7.7125256674    60-69
II      1       0.5119780972    60-69
II      0       7.2525667351    60-69
II      0       6.5790554415    60-69
II      1       4.219028063     60-69
II      0       5.3141683778    60-69
II      0       5.3032169747    60-69
II      0       4.5366187543    60-69
II      1       4.1724845996    60-69
II      0       4.1779603012    60-69
II      0       3.5509924709    60-69
II      1       3.2361396304    60-69
II      0       3.665982204     60-69
II      1       3.6878850103    60-69
II      0       2.0588637919    60-69
II      0       2.0314852841    60-69
II      0       2.1245722108    60-69
II      0       2.0369609856    60-69
II      0       2.1382614648    60-69
II      0       1.9904175222    60-69
II      0       1.1526351814    60-69
II      0       1.0814510609    60-69
II      0       1.1362080767    60-69
II      0       1.4592744695    60-69
II      0       1.067761807     60-69
II      0       7.9698836413    60-69
II      0       6.8008213552    60-69
II      0       6.045174538     60-69
II      0       6.0150581793    60-69
II      0       5.7002053388    60-69
II      0       4.9500342231    60-69
II      0       5.7193702943    60-69
II      0       5.2484599589    60-69
II      0       2.9349760438    60-69
II      0       2.0889801506    60-69
II      0       0.1943874059    60-69
II      0       0.462696783     60-69
II      0       0.3449691992    60-69
II      0       0.3531827515    60-69
II      1       6.7926078029    60-69
II      0       7.2717316906    60-69
II      0       6.855578371     60-69
II      0       7.1074606434    60-69
II      1       7.318275154     60-69
II      0       5.3689253936    60-69
II      0       5.4045174538    60-69
II      0       5.158110883     60-69
II      0       4.7091033539    60-69
II      0       3.3894592745    60-69
II      0       4.1642710472    60-69
II      0       4.2162902122    60-69
II      0       3.8110882957    60-69
II      0       4.0054757016    60-69
II      0       2.9869952088    60-69
II      0       2.546201232     60-69
II      0       2.1409993155    60-69
II      0       2.2970568104    60-69
II      0       2.0314852841    60-69
II      0       0.9883641342    60-69
II      0       1.1416837782    60-69
II      0       1.2840520192    60-69
II      0       0.3915126626    60-69
II      0       0.3750855578    60-69
II      0       0.7227926078    60-69
II      0       8.3394934976    60-69
II      1       7.8986995209    60-69
II      1       4.7665982204    60-69
II      1       3.3237508556    60-69
II      1       7.0965092402    60-69
II      0       7.3894592745    60-69
II      1       0.7857631759    60-69
II      1       4.8350444901    60-69
II      0       6.7953456537    60-69
II      1       4.8843258042    60-69
II      1       4.59137577      60-69
II      0       6.6036960986    60-69
II      0       6.5297741273    60-69
II      0       6.0561259411    60-69
II      0       5.9247091034    60-69
II      0       6.3956194387    60-69
II      0       5.864476386     60-69
II      0       6.0424366872    60-69
II      0       6.0342231348    60-69
II      0       3.5482546201    60-69
II      1       4.3121149897    60-69
II      0       5.3853524983    60-69
II      0       4.9472963723    60-69
II      0       4.5420944559    60-69
II      1       3.8439425051    60-69
II      0       4.5229295003    60-69
II      0       4.8076659822    60-69
II      0       4.9062286105    60-69
II      0       4.4052019165    60-69
II      0       4.257357974     60-69
II      0       3.7672826831    60-69
II      1       0.7419575633    60-69
II      0       3.4661190965    60-69
II      0       3.3401779603    60-69
II      0       3.7535934292    60-69
II      1       1.3552361396    60-69
II      1       3.5017111567    60-69
II      0       2.598220397     60-69
II      0       2.7816563997    60-69
II      1       0.4380561259    60-69
II      0       2.1848049281    60-69
II      0       1.2265571526    60-69
II      0       0.9199178645    60-69
II      0       1.0102669405    60-69
II      0       1.18275154      60-69
II      0       0.5338809035    60-69
II      0       1.0951403149    60-69
II      0       0.8021902806    60-69
II      0       0.5941136208    60-69
II      0       0.3805612594    60-69
II      0       8.0438056126    60-69
II      0       6.288843258     70-79
II      0       4.733744011     70-79
II      0       5.0266940452    70-79
II      0       4.1259411362    70-79
II      0       4               70-79
II      0       3.1403148528    70-79
II      0       1.5441478439    70-79
II      0       2.1765913758    70-79
II      0       2.0561259411    70-79
II      0       1.2101300479    70-79
II      0       0.1943874059    70-79
II      1       6.2833675565    70-79
II      0       2.6173853525    70-79
II      0       4.5557837098    70-79
II      0       3.7563312799    70-79
II      0       3.1841204654    70-79
II      0       3.0335386721    70-79
II      0       1.7659137577    70-79
II      0       6.6611909651    70-79
II      0       7.0527036277    70-79
II      1       1.2457221081    70-79
II      0       5.8206707734    70-79
II      1       0.2299794661    70-79
II      1       1.5496235455    70-79
II      1       5.7577002053    70-79
II      1       0.4654346338    70-79
II      0       5.5359342916    70-79
II      0       3.8439425051    70-79
II      0       3.4250513347    70-79
II      1       2.0862422998    70-79
II      0       3.5947980835    70-79
II      0       2.7679671458    70-79
II      0       2.6255989049    70-79
II      0       3.0882956879    70-79
II      0       2.8309377139    70-79
II      0       1.9958932238    70-79
II      0       2.2231348392    70-79
II      0       0.6351813826    70-79
II      0       1.749486653     70-79
II      1       1.1033538672    70-79
II      0       1.3059548255    70-79
II      0       0.2600958248    70-79
II      0       0.3093771389    70-79
II      0       0.3121149897    70-79
II      0       7.6413415469    70-79
II      0       6.3299110198    70-79
II      1       1.87816564      70-79
II      0       5.6180698152    70-79
II      0       5.5468856947    70-79
II      0       4.7310061602    70-79
II      0       4.076659822     70-79
II      0       3.8685831622    70-79
II      0       2.8391512663    70-79
II      1       2.6119096509    70-79
II      0       2.1793292266    70-79
II      0       1.4099931554    70-79
II      0       1.067761807     70-79
II      0       1.7796030116    70-79
II      0       1.2977412731    70-79
II      0       1.1772758385    70-79
II      0       0.9582477755    70-79
II      0       1.0485968515    70-79
II      0       0.5749486653    70-79
II      0       0.4216290212    70-79
II      0       0.1149897331    70-79
II      0       0.34770705      70-79
II      0       0.3093771389    70-79
II      0       0.2464065708    70-79
II      1       3.5811088296    80+
II      0       6.7405886379    80+
II      0       4.8542094456    80+
II      1       2.045174538     80+
II      0       2.6310746064    80+
II      0       0.9527720739    80+
II      0       0.34770705      80+
II      0       2.3572895277    80+
II      0       7.3429158111    80+
II      1       0.5393566051    80+
II      0       3.1813826146    80+
II      1       1.5331964408    80+
II      0       2.7734428474    80+
II      0       3.498973306     80+
II      0       2.4777549624    80+
II      0       0.3258042437    80+
II      1       3.7754962355    80+
II      0       4.8076659822    80+
II      0       4.205338809     80+
II      0       3.3237508556    80+
II      0       1.53045859      80+
III     1       1.568788501     0-59
III     0       2.8391512663    0-59
III     0       0.7665982204    0-59
III     1       2.7022587269    0-59
III     0       5.2594113621    0-59
III     0       2.379192334     0-59
III     0       1.8206707734    0-59
III     1       0.1259411362    60-69
III     0       2.0506502396    0-59
III     0       2.9623545517    0-59
III     0       1.3935660507    0-59
III     1       2.5270362765    0-59
III     1       3.241615332     0-59
III     0       7.2689938398    70-79
III     1       2.8637919233    0-59
III     0       3.0472279261    0-59
III     1       2.0670773443    0-59
III     1       1.3004791239    0-59
III     0       5.8699520876    0-59
III     1       1.1663244353    0-59
III     1       4.8898015058    0-59
III     1       0.6023271732    0-59
III     0       4.3887748118    0-59
III     1       1.9794661191    0-59
III     0       3.5345653662    0-59
III     0       4.7255304586    0-59
III     0       4.0082135524    0-59
III     0       3.4058863792    0-59
III     0       3.8795345654    0-59
III     0       2.9897330595    0-59
III     1       1.8316221766    0-59
III     0       3.9151266256    0-59
III     0       2.3490759754    0-59
III     0       2.1711156742    0-59
III     1       0.9253935661    0-59
III     1       1.1115674196    0-59
III     1       1.3059548255    0-59
III     0       2.6529774127    0-59
III     0       1.4264202601    0-59
III     0       1.6783025325    0-59
III     0       0.205338809     0-59
III     1       2.4476386037    0-59
III     0       6.0232717317    0-59
III     1       4.9500342231    0-59
III     0       3.7097878166    0-59
III     0       4.5448323066    0-59
III     1       3.2224503765    0-59
III     0       3.8877481177    0-59
III     0       2.6338124572    0-59
III     0       2.726899384     0-59
III     0       2.0287474333    0-59
III     0       1.8973305955    0-59
III     1       1.1033538672    0-59
III     0       1.5523613963    0-59
III     1       0.9281314168    0-59
III     0       0.2464065708    0-59
III     0       0.553045859     0-59
III     0       8.2080766598    0-59
III     0       8.1642710472    0-59
III     0       7.4496919918    0-59
III     0       7.7125256674    0-59
III     0       7.5646817248    0-59
III     1       4.4873374401    0-59
III     1       1.7056810404    0-59
III     1       1.568788501     0-59
III     0       7.2251882272    0-59
III     1       1.2402464066    0-59
III     1       1.8042436687    0-59
III     1       1.6098562628    0-59
III     0       5.3305954825    0-59
III     1       1.0622861054    0-59
III     1       2.1464750171    0-59
III     0       5.3086926762    0-59
III     1       0.7474332649    0-59
III     1       2.9815195072    0-59
III     1       2.5790554415    0-59
III     0       5.3388090349    0-59
III     1       1.4510609172    0-59
III     1       1.8672142368    0-59
III     0       4.0191649555    0-59
III     0       4.1724845996    0-59
III     1       2.340862423     0-59
III     1       2.6420260096    0-59
III     1       2.5215605749    0-59
III     0       4.1259411362    0-59
III     1       1.4976043806    0-59
III     0       3.6440793977    0-59
III     0       3.099247091     0-59
III     1       2.2368240931    0-59
III     1       2.8090349076    0-59
III     0       2.3682409309    0-59
III     1       2.1765913758    0-59
III     0       1.9739904175    0-59
III     0       2.4120465435    0-59
III     0       2.5681040383    0-59
III     1       0.8377823409    0-59
III     1       1.6427104723    0-59
III     0       1.8453114305    0-59
III     0       1.6892539357    0-59
III     1       0.9445585216    0-59
III     0       1.5797399042    0-59
III     1       1.6919917864    0-59
III     0       1.9876796715    0-59
III     0       2.636550308     0-59
III     0       1.5934291581    0-59
III     0       1.1006160164    0-59
III     0       0.4818617385    0-59
III     0       1.6563997262    0-59
III     0       0.900752909     0-59
III     1       1.1088295688    0-59
III     1       0.5749486653    0-59
III     1       1.1937029432    0-59
III     0       1.2813141684    0-59
III     0       1.3004791239    0-59
III     0       1.3223819302    0-59
III     0       0.7145790554    0-59
III     0       0.3613963039    0-59
III     0       0.3997262149    0-59
III     0       0.4572210815    0-59
III     0       0.6543463381    0-59
III     0       0.2162902122    0-59
III     0       1.2073921971    60-69
III     0       1.2703627652    60-69
III     0       2.5106091718    60-69
III     0       2.3162217659    60-69
III     0       1.106091718     60-69
III     0       0.2217659138    60-69
III     0       7.5318275154    60-69
III     1       1.7002053388    60-69
III     0       5.3059548255    60-69
III     1       4.1095140315    60-69
III     1       2.1026694045    60-69
III     0       2.7789185489    60-69
III     0       2.8227241615    60-69
III     0       2.4394250513    60-69
III     0       2.0424366872    60-69
III     0       1.9575633128    60-69
III     0       1.2648870637    60-69
III     1       1.5715263518    60-69
III     0       4.8651608487    60-69
III     0       7.8959616701    70-79
III     1       3.9315537303    70-79
III     1       1.1389459274    70-79
III     0       0.5941136208    80+
III     0       0.0958247775    80+
III     0       0.7802874743    80+
III     0       0.4407939767    80+
IV      1       1.9849418207    0-59
IV      1       2.6036960986    0-59
IV      1       0.9938398357    0-59
IV      1       0.2710472279    0-59
IV      1       0.0492813142    0-59
IV      1       4.2847364819    0-59
IV      1       3.1759069131    0-59
IV      0       0.3121149897    0-59
IV      0       8.3422313484    60-69
IV      0       2.8090349076    60-69
IV      1       0.8569472964    60-69
IV      1       4.9336071184    70-79
IV      0       4.2245037645    0-59
IV      0       1.3278576318    0-59
IV      1       2.4120465435    0-59
IV      1       1.2785763176    0-59
IV      1       5.0047912389    0-59
IV      1       1.7522245038    0-59
IV      0       0.6789869952    0-59
IV      0       0.2299794661    0-59
IV      0       1.0075290897    0-59
IV      0       0.4435318275    0-59
IV      0       0.3997262149    0-59
IV      0       2.6639288159    0-59
IV      0       0.4681724846    0-59
IV      1       0.1368925394    0-59
IV      1       4.2464065708    0-59
IV      1       2.6255989049    0-59
IV      0       2.4558521561    0-59
IV      1       0.0301163587    0-59
IV      0       0.4216290212    0-59
IV      1       0.1095140315    0-59
IV      1       6.3737166324    0-59
IV      1       3.8850102669    0-59
IV      1       1.6372347707    0-59
IV      1       0.4106776181    0-59
IV      1       1.1690622861    0-59
IV      1       0.7885010267    0-59
IV      1       1.4839151266    0-59
IV      1       2.1765913758    0-59
IV      1       2.4257357974    0-59
IV      1       1.1197809719    0-59
IV      1       0.2354551677    0-59
IV      1       1.2840520192    0-59
IV      1       1.9329226557    0-59
IV      0       2.3737166324    0-59
IV      1       0.0027378508    0-59
IV      1       0.7912388775    0-59
IV      1       1.2594113621    0-59
IV      1       0.1943874059    0-59
IV      0       1.7029431896    0-59
IV      0       1.0485968515    0-59
IV      0       0.386036961     0-59
IV      0       0.8514715948    0-59
IV      0       1.0568104038    0-59
IV      0       0.334017796     0-59
IV      0       0.3805612594    0-59
IV      0       0.4462696783    0-59
IV      0       2.1108829569    60-69
IV      0       1.3880903491    60-69
IV      0       0.476386037     60-69
IV      0       0.4188911704    60-69
IV      1       1.9411362081    60-69
IV      1       1.9603011636    60-69
IV      1       1.0485968515    60-69
IV      1       2.0643394935    60-69
IV      1       1.6262833676    60-69
IV      1       3.6002737851    60-69
IV      1       0.5968514716    60-69
IV      0       1.1307323751    60-69
IV      1       0.1368925394    60-69
IV      0       0.3586584531    60-69
IV      0       0.090349076     60-69
IV      0       0.4298425736    60-69
IV      1       4.1533196441    60-69
IV      1       3.5044490075    70-79
IV      0       3.7782340862    70-79
IV      0       2.0862422998    70-79
IV      1       0.9993155373    70-79
IV      1       0.1752224504    70-79
IV      1       0.5393566051    70-79
IV      1       0.4955509925    70-79
IV      1       0.2874743326    80+
IV      1       1.7604380561    80+
IV      1       4.7994524298    80+
IV      0       1.2128678987    80+
IV      0       0.7310061602    80+
;




****************************************************
/* The following data set is mentioned on page 109,*/ 
/* where it is used to produce output 4.1.         */
****************************************************



data;
input breslow stime scens dfstime dfscens ulcer loc1 loc2 loc3 sex;
cards;
.      797   1   10.395 1      .  0  1    0  1
0.2    2732  0   89.868 0      0  0  0    1  1
0.5    1923  0   63.257 0      0  1  0    0  1
0.97   727   0   23.914 0      0  1  0    0  0
1.35   1608  0   52.895 0      0  1  0    0  0
0.75   1209  0   39.770 0      0  0  0    1  1
2.91   1743  0   57.336 0      0  0  1    0  1
0.79   1174  0   38.618 0      0  0  0    1  1
1.4    204   0    6.711 0      .  0  1    0  0
2.5    731   0   22.204 1      .  1  0    0  1
3      687   0    8.750 1      1  0  1    0  1
3.23   455   0   14.967 0      1  1  0    0  0
0.38   1127  0   37.072 0      .  0  1    0  1
2.8    314   0   10.329 0      .  0  1    0  1
0.77   1201  0   39.507 0      0  0  1    0  0
3.8    851   0   15.493 1      1  0  1    0  0
7      1709  0   37.533 1      .  0  0    1  1
1      1110  0   36.513 0      .  1  0    0  1
0.9    79    0    2.599 0      0  0  1    0  1
0.65   1558  0   51.250 0      0  0  1    0  1
.      .     1     .    1      .  0  0    0  1
0.3    142   0    4.671 0      0  0  1    0  1
2.4    871   1   13.783 1      1  0  0    1  1
1.5    -88   0    8.026 1      0  1  0    0  1
1.2    3109  1   22.566 1      1  0  1    0  1
0.65   729   0   23.980 0      0  0  1    0  1
0.54   735   0   24.178 0      .  1  0    0  0
0.75   57    0    1.875 0      .  1  0    0  1
1.8    2344  0   77.105 0      .  0  1    0  1
0.25   3662  0   28.882 1      0  0  1    0  1
0.47   3100  0  101.974 0      0  1  0    0  0
1      1138  1   24.276 1      0  0  0    0  1
0.48   2262  0   74.408 0      .  1  0    0  0
2      2602  0   85.592 0      0  1  0    0  1
1.84   1288  0   42.368 0      1  0  1    0  1
1.6    2944  0   96.842 0      .  1  0    0  0
1.43   5135  1  151.447 1      1  0  0    1  1
0.25   3466  0  114.013 0      .  0  1    0  0
1.1    2843  0   93.520 0      0  0  1    0  1
0.45   2534  0   83.355 0      0  0  1    0  1
2.1    2037  1  -72.434 1      0  0  1    0  1
3      2594  0   85.329 0      .  0  1    0  0
1.7    1763  0   57.993 0      .  0  1    0  0
0.33   1097  0   36.086 0      0  1  0    0  0
1.8    355   1   11.678 0      0  0  0    1  1
0.4    1569  0   51.612 0      .  1  0    0  0
2.4    1161  1   27.664 1      .  0  0    1  .
4.98   677   0    1.579 1      0  0  0    1  1
1.5    1386  0   45.592 0      .  0  0    1  1
0.3    5715  1  187.993 0      0  0  0    1  0
1.2    -1    0   -0.033 0      .  0  0    1  1
0.7    .     0     .    0      0  0  0    0  .
2.4    957   1   25.033 1      .  0  1    0  1
0.4    1177  0   38.717 0      .  1  0    0  0
0.81   2849  0   93.717 0      .  1  0    0  1
2.6    2786  0   25.164 1      0  1  0    0  0
1      3527  0  116.020 0      0  1  0    0  1
0.26   647   0   10.493 1      0  0  0    1  0
0.72   2732  0   89.868 0      0  0  1    0  1
0.35   1120  0   36.842 0      0  0  1    0  1
2.4    1516  0   49.868 0      0  0  1    0  1
0.36   26    0    0.855 0      .  1  0    0  0
1.55   515   0   16.941 0      1  0  1    0  1
1.2    2688  0   88.421 0      0  0  1    0  1
0.41   236   0    7.763 0      0  1  0    0  0
0.45   0     0    0.000 0      0  0  1    0  0
0.35   307   0   10.099 0      0  0  1    0  0
2.76   3528  0   26.118 1      0  1  0    0  1
4.59   12    0    0.395 0      0  0  0    1  1
0.44   19    0    0.625 0      .  0  1    0  1
0.33   2368  0   77.895 0      0  0  1    0  0
1.2    2425  0   79.770 0      1  0  0    1  1
1.28   618   0   20.329 0      1  0  0    1  1
1.2    .     0     .    0      0  0  0    0  1
3.5    -1    0   -0.033 0      0  0  0    1  1
0.95   1238  0   40.724 0      0  1  0    0  1
0.8    7     0    0.230 0      .  0  1    0  1
2      1168  1   30.921 1      .  0  1    0  1
1.1    2694  0   88.618 0      0  1  0    0  1
1.45   2227  0   73.257 0      0  0  1    0  1
0.4    0     0    0.000 0      0  1  0    0  1
1.7    2320  0   76.316 0      1  0  0    1  1
0.57   1710  0   56.250 0      0  1  0    0  0
0.3    4103  0  134.967 0      0  1  0    0  0
0.9    .     0     .    0      .  0  0    0  .
0.74   286   0    9.408 0      .  0  1    0  0
8.1    158   0    5.197 0      1  0  0    1  0
1.3    2406  0   79.145 0      0  1  0    0  1
1.2    2366  0   77.829 0      0  0  0    1  1
0.8    1891  0   62.204 0      0  1  0    0  0
0.3    1823  0   46.842 1      .  0  1    0  1
4.68   2693  0   88.586 0      0  1  0    0  0
1.25   399   0   13.125 0      0  0  1    0  0
1.2    19    0    0.625 0      0  0  1    0  1
2.2    2039  0   67.072 0      1  1  0    0  0
1.48   2387  0   78.520 0      0  0  0    1  1
1.5    1801  1   57.007 1      .  1  0    0  1
0.9    19    0    0.625 0      .  1  0    0  1
7.6    621   0   20.428 0      1  0  1    0  1
3.3    5398  0   91.645 1      .  0  1    0  0
0.9    2990  0   98.355 0      1  1  0    0  0
0.7    25    0    0.822 0      .  0  1    0  1
1.7    1412  1   13.849 1      1  0  1    0  1
0.43   25    0    0.822 0      0  0  1    0  0
0.6    1828  0   60.132 0      .  1  0    0  1
3.9    462   1    6.776 1      1  1  0    0  0
2.24   1281  0   42.138 0      0  1  0    0  1
0.85   2213  0   72.796 0      0  0  1    0  0
1.8    2338  0   76.908 0      0  0  1    0  0
2.2    1877  0   61.743 0      1  0  1    0  0
3.01   413   0   13.586 0      .  0  1    0  0
0.28   2575  0   84.704 0      0  1  0    0  0
1.85   5153  0   90.428 1      0  1  0    0  0
0.28   2391  0   78.651 0      0  0  0    1  0
0.75   1872  1   55.164 1      0  0  1    0  .
1.2    2451  0   80.625 0      1  1  0    0  0
0.57   118   0    3.882 0      .  1  0    0  0
0.45   1407  0   46.283 0      0  1  0    0  1
0.72   126   0    4.145 0      1  0  1    0  1
0.92   1793  0   58.980 0      0  0  1    0  1
1.69   1570  0   51.645 0      0  0  0    1  0
0.4    1002  0   32.961 0      0  1  0    0  0
1.6    1561  0   51.349 0      0  0  1    0  0
1.2    1818  0   59.803 0      0  1  0    0  0
2.5    5167  0  103.618 1      0  1  0    0  0
0.3    335   0   11.020 0      .  0  1    0  0
1.4    2455  0   80.757 0      0  0  1    0  0
5.5    2904  0    7.072 1      0  0  0    1  0
1.5    1934  1   50.493 1      .  1  0    0  1
1.46   1268  0   41.711 0      .  1  0    0  1
4      46    0    1.513 0      1  0  1    0  1
1.95   805   1   13.750 1      1  1  0    0  1
1.3    411   0   13.520 0      0  1  0    0  1
0.3    961   0   31.612 0      0  0  1    0  0
0.55   74    0    2.434 0      0  1  0    0  0
0.6    1644  0   54.079 0      0  1  0    0  0
6      2217  0   72.928 0      1  0  1    0  0
4.2    563   1   13.026 1      1  0  1    0  1
0.45   3608  1  103.618 1      0  0  1    0  0
0.65   834   0   27.434 0      0  1  0    0  1
2.77   2140  0   70.395 0      1  1  0    0  1
2.5    1129  1   25.559 1      1  1  0    0  1
1.55   2077  0   68.322 0      0  1  0    0  0
3      709   1   19.803 1      .  1  0    0  0
0.55   1382  0   45.461 0      0  1  0    0  1
0.55   1973  0   64.901 0      0  0  1    0  1
0.62   2246  0   72.697 1      0  1  0    0  1
0.68   779   1   25.625 0      1  0  0    1  0
1.6    1983  0   65.230 0      0  0  0    1  1
1.8    2028  0   22.993 1      1  0  1    0  1
5.55   738   0   18.421 1      1  0  0    1  1
0.75   218   0    7.171 0      0  1  0    0  0
0.93   119   0    3.914 0      0  0  0    1  1
1.98   550   1    9.112 1      .  0  1    0  1
1.9    1758  0   58.125 1      0  0  1    0  0
2.7    1841  0   60.559 0      0  0  0    1  1
0.6    34    0    1.118 0      0  0  1    0  1
0.4    1177  0   38.717 0      0  1  0    0  1
0.25   3193  0   30.724 1      0  1  0    0  0
1.65   872   0   28.684 0      0  1  0    0  0
4      1083  1   30.230 1      1  1  0    0  0
0.8    5674  0  112.829 1      0  0  0    1  1
0.47   102   0    3.355 0      0  0  0    1  0
1      428   1    5.855 1      0  1  0    0  1
0.41   2535  0   83.388 0      0  1  0    0  0
1.3    2163  0   71.151 0      0  0  1    0  1
0.41   210   0    6.908 0      0  1  0    0  1
0.5    2661  0   87.533 0      0  0  0    1  1
0.54   4190  1   86.382 1      0  0  1    0  1
3.6    1152  0   37.895 0      1  0  1    0  1
0.87   2389  1   32.829 1      0  1  0    0  0
0.93   1038  0   34.145 0      .  1  0    0  0
2.5    53    0    1.743 0      0  1  0    0  1
2.8    1134  0   37.303 0      0  0  1    0  1
0.55   2196  0   72.237 0      0  0  1    0  0
0.31   1908  0   62.763 0      0  1  0    0  0
3      2208  1   11.053 1      .  0  0    0  .
3      668   0   21.974 0      .  1  0    0  0
4      1977  1   54.572 1      1  1  0    0  1
2.28   786   0   25.855 0      0  0  1    0  1
5.5    1709  0   56.217 0      0  0  1    0  1
3      1144  0   37.632 0      .  0  0    1  1
2.5    2074  0   68.224 0      0  0  1    0  1
0.35   1901  0   62.533 0      0  0  0    1  0
0.3    67    0    2.204 0      .  0  1    0  0
0.74   1857  0   61.086 0      0  0  1    0  1
0.9    768   0   25.263 0      0  0  1    0  0
1.31   1204  0   39.605 0      .  0  1    0  1
0.33   2940  0   24.671 1      0  0  1    0  0
0.82   442   0   14.539 0      0  0  0    1  0
1      405   0   13.322 0      0  1  0    0  0
2      1076  0   10.855 1      0  1  0    0  1
1.5    314   0   10.329 0      1  0  1    0  1
0.85   30    0    0.987 0      0  0  1    0  0
2      14    0    0.461 0      0  0  0    1  1
7.1    616   0   20.263 0      .  0  1    0  1
0.6    449   0   14.770 0      0  0  0    1  0
0.3    15    0    0.493 0      0  0  1    0  1
0.2    1774  0   58.355 0      0  1  0    0  0
1.33   2200  0   72.368 0      0  0  1    0  1
2.75   2624  0   86.316 0      1  0  1    0  1
7      751   1    5.033 1      1  0  1    0  1
0.68   1752  0   57.632 0      0  0  1    0  1
0.98   4332  0  102.204 1      .  1  0    0  0
0.8    2367  0   77.862 0      0  1  0    0  0
2      1897  0   62.401 0      0  0  1    0  1
1.1    1848  0   60.789 0      0  1  0    0  0
0.55   2135  0   70.230 0      .  0  1    0  0
2.1    1802  1   42.796 1      0  1  0    0  0
0.5    141   0    4.638 0      0  0  0    0  0
0.74   5383  0  177.072 0      .  1  0    0  0
2.75   694   0   22.829 0      0  1  0    0  1
1.3    3996  0   90.559 1      0  0  1    0  0
2.8    0     0    0.000 0      .  0  0    1  1
1.79   1149  1   24.539 1      1  0  0    0  0
4.15   1095  1   35.789 1      1  0  1    0  0
10     2302  1   58.257 1      0  1  0    0  0
4      1672  1   25.329 1      .  0  0    0  1
4      4014  1  109.243 1      1  0  1    0  1
1.28   5243  0   73.355 1      .  1  0    0  0
0.42   3422  0  112.566 0      0  0  1    0  0
1      187   0    6.151 0      0  0  1    0  0
2.15   1307  1    6.086 1      0  1  0    0  1
2.57   831   1   27.336 0      .  0  0    1  0
0.95   423   0   13.914 0      0  0  1    0  1
2.7    1168  0   38.421 0      .  1  0    0  1
1.2    2051  0   67.467 0      0  0  1    0  1
1.27   1545  1   16.612 1      1  0  1    0  1
1.45   1854  0    5.691 1      0  1  0    0  1
0.4    497   0   16.349 0      0  0  0    1  0
5.5    3891  0   61.382 1      1  1  0    0  0
2      315   0   10.362 0      0  1  0    0  0
1.79   657   0   21.612 0      1  0  0    1  1
9.5    1555  0   16.118 1      0  1  0    0  0
0.25   9     0    0.296 0      0  0  1    0  1
2.5    1994  0   65.592 0      1  0  1    0  0
2      364   0   11.974 0      0  0  1    0  0
0.36   445   0   14.638 0      0  0  1    0  1
2.71   2153  1   34.803 1      0  0  1    0  1
7      809   1   13.059 1      1  0  0    0  0
0.92   344   0   11.316 0      .  0  1    0  0
0.7    91    1    1.349 1      0  0  1    0  1
0.55   14    0    0.461 0      0  1  0    0  0
0.62   39    0    1.283 0      0  0  1    0  1
0.65   1318  0   43.355 0      0  0  1    0  1
0.76   736   0   24.211 0      0  1  0    0  0
1.57   913   0   30.033 0      0  0  1    0  0
0.6    1791  0   44.737 1      0  0  1    0  1
1.7    1661  0   27.533 1      0  0  1    0  0
1.84   77    0    2.533 0      .  0  0    1  1
.      915   1    8.651 1      0  0  1    0  1
1.83   841   0   27.664 0      0  0  1    0  0
0.37   3261  0  107.270 0      .  0  1    0  0
1.02   160   0    5.263 0      0  0  0    1  1
3.75   711   0   14.079 1      0  0  1    0  1
1.6    1580  0   51.974 0      0  0  1    0  1
3      805   0   26.480 0      0  1  0    0  0
0.31   3637  0  119.638 0      0  0  1    0  0
4.8    670   1    8.651 1      1  0  1    0  1
1.3    2258  1   61.612 1      0  1  0    0  1
2      3225  0  106.086 0      0  0  0    1  0
1.15   1798  0   59.145 0      0  0  1    0  1
4      3390  0   61.678 1      .  0  1    0  0
4      700   1   23.026 0      1  0  1    0  1
0.41   1504  0   49.474 0      0  0  1    0  .
10     13    0    0.428 0      1  0  0    1  1
0.79   216   0    7.105 0      0  0  0    1  0
0.58   999   0   32.862 0      .  1  0    0  0
1.34   1548  0   50.921 0      0  0  1    0  0
0.46   32    0    1.053 0      0  0  1    0  1
4.2    468   0   15.395 0      0  1  0    0  0
0.7    46    0    1.513 0      0  0  0    1  0
20     316   1    7.796 1      0  0  0    1  0
5      1488  1    9.967 1      1  0  1    0  1
0.51   1343  0   44.178 0      0  0  0    1  0
1.74   1378  0   45.329 0      1  0  1    0  0
0.5    458   0   15.066 0      0  0  0    0  1
2.6    1218  1   34.901 1      .  0  0    1  1
0.4    1109  0   36.480 0      .  0  0    0  0
0.3    680   0   22.368 0      0  1  0    0  1
0.98   401   0   13.191 0      0  0  1    0  0
2.84   1875  0   61.678 0      0  0  1    0  1
1.73   1836  0   60.395 0      0  1  0    0  0
1.68   564   0   18.553 0      0  1  0    0  1
0.63   95    0    3.125 0      0  0  1    0  0
1.1    1040  0   34.211 0      0  0  1    0  1
2.9    .     0     .    0      .  0  0    1  1
0.9    610   1   12.007 1      .  0  0    1  1
2.04   57    0    1.875 0      0  0  1    0  1
1.55   1557  1   32.763 1      0  0  1    0  1
4      3081  0   43.092 1      0  0  1    0  1
2.5    2571  1   66.053 1      .  0  1    0  1
1.2    1786  0   11.546 1      0  1  0    0  1
2.32   1099  0   36.151 0      1  0  0    1  1
5      197   0    6.480 0      1  0  1    0  1
0.51   1281  0   42.138 0      0  1  0    0  1
1.5    118   0    3.882 0      1  0  0    0  0
2.8    60    0    1.974 0      1  1  0    0  0
1.5    389   0   12.796 0      0  1  0    0  0
0.31   491   0   16.151 0      .  0  1    0  1
0.13   36    0    1.184 0      0  0  1    0  1
5.1    741   0   24.375 0      0  0  0    1  1
3.4    517   1    6.875 1      0  1  0    0  1
3.7    1101  1    8.454 1      0  0  1    0  1
0.97   1824  0   60.000 0      0  0  1    0  1
0.3    1501  0   49.375 0      1  1  0    0  0
1.5    3107  0  102.204 0      0  0  1    0  0
2.8    1527  1   36.579 1      .  1  0    0  0
2      1773  0   58.322 0      0  1  0    0  1
0.35   523   0   17.204 0      0  1  0    0  1
0.54   605   0   19.901 0      0  0  1    0  1
5.4    481   0   15.822 0      0  0  1    0  1
3.25   557   1    6.447 1      1  0  0    0  1
1.1    17    0    0.559 0      1  0  1    0  .
3.45   482   1   11.382 1      1  0  1    0  1
1.23   2635  1   71.118 1      .  1  0    0  1
5.05   1426  0   46.908 0      0  0  0    1  1
1.54   1107  0   18.914 1      0  0  1    0  1
1.94   2041  0   30.954 1      .  0  1    0  0
0.5    1736  0   57.105 0      0  1  0    0  0
1.4    923   0   30.362 0      0  0  1    0  1
2.73   1528  0   50.263 0      1  0  0    1  1
4.29   14    0    0.461 0      0  1  0    0  1
0.75   989   0   32.533 0      1  0  1    0  0
2      450   0   14.803 0      0  0  1    0  1
2.64   1422  0   46.776 0      0  1  0    0  1
2.4    238   0    5.954 1      0  1  0    0  0
1.71   1396  0   42.434 1      0  0  1    0  0
0.4    216   0    7.105 0      0  0  0    1  1
0.36   2731  0   89.836 0      0  1  0    0  1
0.4    1223  0   40.230 0      0  0  1    0  1
0.92   354   0   11.645 0      0  1  0    0  0
0.9    1123  0   36.941 0      0  0  1    0  0
2.1    2706  0   87.204 1      0  0  0    0  0
4.1    1776  0   58.421 0      0  1  0    0  0
1.8    1133  1   31.776 1      .  0  0    1  1
0.89   1467  0   48.257 0      0  1  0    0  0
2.7    2530  0   83.224 0      .  0  1    0  0
3      1492  0   49.079 0      1  1  0    0  1
0.49   470   0   15.461 0      0  1  0    0  0
1.5    189   0    6.217 0      0  0  1    0  1
0.75   103   0    3.388 0      0  1  0    0  0
0.4    19    0    0.625 0      0  0  1    0  0
2.5    12    0    0.395 0      1  0  0    0  0
0.35   1506  0   49.539 0      0  1  0    0  1
1      1758  0   57.829 0      0  0  0    0  0
2      4633  0   29.704 1      0  0  1    0  0
0.97   1183  0   38.914 0      0  0  1    0  1
4.75   747   0   24.572 0      1  1  0    0  0
0.62   91    0    2.993 0      0  0  1    0  1
0.5    1170  0   38.487 0      0  0  1    0  1
0.45   1256  0   41.316 0      0  0  1    0  0
0.32   573   0   18.849 0      0  0  0    1  1
3.55   63    1    2.072 0      1  1  0    0  1
1.6    1222  0   40.197 0      1  0  1    0  1
1.72   1215  1   28.553 1      .  0  1    0  1
1.5    307   0    8.882 1      0  0  1    0  1
0.76   914   0   30.066 0      0  0  1    0  0
1.58   1684  0   55.395 0      0  0  1    0  0
1.6    895   0   29.441 0      0  0  0    0  0
0.82   19    0    0.625 0      0  0  1    0  0
0.45   1419  0   46.678 0      0  0  0    1  1
0.65   634   0   20.855 0      0  0  1    0  0
1.31   1511  0   49.704 0      0  0  1    0  1
0.46   35    0    1.151 0      0  1  0    0  1
2.9    992   0   32.632 0      1  0  1    0  1
2.6    1541  1   30.428 1      0  1  0    0  1
2.1    1751  0   57.599 0      0  0  1    0  1
2.6    1505  0   13.882 1      0  0  1    0  1
2.19   1614  0   53.092 0      1  0  0    0  1
0.4    85    0    2.796 0      0  0  1    0  1
0.55   1149  0   37.796 0      0  0  0    1  1
1.12   1527  0   50.230 0      0  1  0    0  1
5.1    1355  0   44.572 0      0  0  0    1  1
0.9    1137  0   37.401 0      0  0  0    1  0
0.67   1338  0   21.809 1      0  0  0    1  1
0.55   14    0    0.461 0      0  0  1    0  0
5.12   561   0   18.454 0      1  0  1    0  0
0.2    90    0    2.961 0      0  0  1    0  1
2.2    1422  0   46.776 0      1  0  0    1  1
3.3    3853  0  105.493 1      1  1  0    0  0
1.4    1745  0   57.401 0      0  0  0    1  1
1.1    1189  0   39.112 0      0  0  0    1  1
0.1    1407  0   46.283 0      0  0  0    1  1
1.2    855   0   27.401 1      0  1  0    0  0
0.33   343   0   11.283 0      0  1  0    0  0
2.44   585   1    5.000 1      1  1  0    0  0
2.55   1451  0   47.730 0      0  1  0    0  0
2.9    1442  0   47.434 0      0  0  1    0  1
5      18    0    0.592 0      1  0  0    0  1
1.54   56    0    1.842 0      0  1  0    0  0
0.78   1527  0   50.230 0      0  1  0    0  1
0.6    372   0   12.237 0      0  1  0    0  0
2.54   1485  1   45.724 1      0  0  0    1  1
1.2    1446  0   47.566 0      0  0  0    1  1
0.91   16    0    0.526 0      0  0  1    0  1
2.91   1639  0    8.618 1      1  0  1    0  1
1.32   1265  0   41.612 0      0  0  1    0  1
3      1400  0   46.053 0      .  0  1    0  0
0.65   1589  0   52.270 0      0  1  0    0  0
0.35   119   0    3.914 0      0  1  0    0  1
2.5    179   1    0.493 1      .  0  0    1  1
1.72   1555  0   51.151 0      0  0  0    1  1
3      859   0   28.257 0      .  0  0    1  1
1.5    1637  0   53.849 0      0  0  1    0  0
4.85   543   0   17.862 0      1  0  0    1  0
1.62   901   1   23.224 1      0  0  1    0  0
0.98   1631  0   53.651 0      0  0  0    1  1
0.5    1477  0   48.586 0      0  1  0    0  0
1.27   468   0   15.395 0      0  0  1    0  1
1.3    1390  0   45.724 0      0  0  1    0  1
1.4    2583  0   32.401 1      0  1  0    0  0
2.31   921   0   30.296 0      1  1  0    0  1
1.2    2888  0   95.000 0      0  0  1    0  1
0.8    491   0   16.151 0      1  0  1    0  1
2.2    126   0    4.145 0      1  0  1    0  0
1.14   918   0   30.197 0      0  0  1    0  1
0.62   1050  0   34.539 0      0  1  0    0  0
1.35   12    0    0.395 0      0  0  0    1  1
1.87   1176  0   38.684 0      0  0  1    0  1
0.48   1980  1   60.559 1      0  0  0    0  1
0.95   2263  0   47.664 1      0  0  0    1  0
4      994   0   18.651 1      0  0  1    0  1
2.64   1218  0   21.250 1      0  0  1    0  1
6.47   791   0   20.658 1      1  0  1    0  1
3.89   1054  0   34.671 0      0  1  0    0  1
1.17   1653  0   23.059 1      0  1  0    0  1
0.76   885   0   29.112 0      0  1  0    0  0
4.34   427   0    9.474 1      0  0  1    0  1
1.4    6560  0  215.789 0      0  0  0    1  1
3.5    1220  0   40.132 0      1  0  1    0  1
2.55   1211  0   27.599 1      0  0  0    1  1
1.8    771   0   25.362 0      0  1  0    0  1
0.5    27    0    0.888 0      0  0  1    0  1
1.53   491   1    7.796 1      0  0  1    0  1
1.28   1484  0   48.816 0      0  0  0    0  1
5      1174  1   11.842 1      .  0  1    0  1
1.55   757   0   24.901 0      0  0  1    0  1
0.79   1797  0   59.112 0      0  1  0    0  0
2.3    2014  1   47.533 1      1  0  1    0  0
0.6    1712  0   56.316 0      0  0  1    0  1
2.5    916   0   30.132 0      1  0  1    0  1
0.39   1540  0   50.658 0      .  1  0    0  0
0.5    17    0    0.559 0      0  0  1    0  1
0.48   1226  0   40.329 0      0  0  1    0  0
1.72   791   0   25.691 1      0  0  1    0  1
0.74   64    0    2.105 0      0  1  0    0  0
0.47   217   0    7.138 0      0  1  0    0  0
0.92   1696  0   55.789 0      0  0  1    0  0
2.2    401   1   10.625 1      1  1  0    0  0
4.4    421   0   13.750 1      1  0  1    0  1
1.78   1787  0   44.507 1      0  1  0    0  0
2.3    1188  1   22.697 1      0  0  1    0  0
3.16   127   0    4.178 0      1  0  0    1  1
10     24    0    0.789 0      .  1  0    0  0
2.3    506   1    4.112 1      1  1  0    0  1
0.63   300   0    9.868 0      .  0  1    0  0
1.66   13    0    0.428 0      1  1  0    0  0
1.43   799   0   26.283 0      0  0  1    0  0
1.95   1646  0   54.145 0      0  0  0    1  1
12.1   28    0    0.921 0      1  1  0    0  0
3.17   27    0    0.888 0      1  0  0    1  1
0.88   737   0   24.243 0      1  1  0    0  0
0.5    1289  0   42.401 0      0  1  0    0  0
2.55   511   0   11.086 1      0  0  0    1  1
1.46   369   0   12.138 0      0  1  0    0  0
1.43   1462  0   48.092 0      1  0  1    0  0
0.8    1362  0   44.803 0      1  0  1    0  0
1.7    2550  0   22.303 1      0  0  1    0  1
0.85   1098  0   36.118 0      0  0  1    0  1
2.2    1172  0   38.553 0      0  1  0    0  0
0.5    2404  0   79.079 0      .  0  1    0  1
1.71   1457  0   16.711 1      .  0  1    0  1
0.75   380   1    5.691 1      .  0  0    1  1
0.75   4633  0  152.401 0      .  0  1    0  1
1.8    1426  0   18.553 1      1  1  0    0  0
2.55   15    0    0.493 0      1  0  1    0  0
3.16   313   0   10.296 0      1  0  0    1  1
0.5    1188  0   39.079 0      .  1  0    0  1
0.62   1083  0   35.625 0      .  0  0    1  1
0.4    1596  0   23.026 1      .  0  1    0  1
0.9    1107  0   36.414 0      0  1  0    0  1
0.39   2129  0   70.033 0      0  0  1    0  0
1.02   1339  0   44.046 0      0  0  1    0  0
1.6    1368  0   21.151 1      .  0  1    0  1
3.8    1435  0   47.204 0      1  1  0    0  0
0.6    63    0    2.072 0      .  1  0    0  1
0.26   14    0    0.461 0      .  1  0    0  1
3.83   135   0    3.684 1      .  0  1    0  1
1.56   1107  0   36.414 0      0  0  0    1  0
0.6    944   0   31.053 0      0  0  1    0  1
0.53   141   0    4.638 0      0  1  0    0  1
0.85   507   0   16.678 0      .  0  1    0  1
0.7    28    0    0.921 0      .  0  0    1  1
1.1    661   0   21.743 0      0  1  0    0  0
2.89   544   0   17.895 0      1  1  0    0  1
1.3    1352  0   15.132 1      0  0  1    0  0
0.6    1756  0   14.967 1      0  0  0    1  1
1      1281  0   42.138 0      .  1  0    0  0
0.33   592   0   19.474 0      .  0  1    0  0
8      267   0    8.783 0      1  0  0    1  0
1.8    1392  0   45.789 0      0  0  1    0  1
0.46   310   0   10.197 0      0  0  1    0  1
1.65   1067  0   35.099 0      0  0  1    0  1
6      1988  0   21.809 1      1  0  0    1  1
0.9    302   0    8.618 1      .  0  0    1  1
0.72   1328  0   43.684 0      0  1  0    0  0
1.32   4643  0  152.730 0      1  1  0    0  0
1.67   223   0    7.336 0      1  0  1    0  0
1.1    553   0   18.191 0      0  1  0    0  0
1.35   72    0    2.368 0      0  0  1    0  1
0.6    939   0   30.888 0      .  0  1    0  0
0.8    1034  0   34.013 0      0  1  0    0  0
1.15   1126  0   37.039 0      .  1  0    0  0
4      961   0   21.414 1      1  1  0    0  1
0.3    207   0    6.809 0      .  0  1    0  1
2      353   0   11.612 0      .  1  0    0  0
0.77   794   0   26.118 0      .  0  1    0  1
1.67   444   0    5.296 1      0  0  0    1  1
0.36   472   0   15.526 0      0  1  0    0  0
1.9    776   0   20.428 1      1  0  1    0  1
0.9    1556  0   18.947 1      .  0  0    1  1
0.67   9     0    0.296 0      0  1  0    0  1
5.5    19    0    0.625 0      1  0  0    1  1
0.41   1076  0   35.395 0      .  0  0    1  1
0.3    539   0   17.730 0      .  1  0    0  0
0.8    763   0   25.099 0      0  0  0    1  1
0.75   2854  0   93.882 0      0  0  1    0  1
0.54   1482  0   48.750 0      .  0  1    0  1
2.3    1395  0   45.888 0      .  0  0    1  1
0.96   1219  0   40.099 1      0  0  1    0  0
4.1    6740  0   59.770 1      1  0  1    0  0
0.42   1321  0   43.454 0      .  1  0    0  0
5.5    1003  1   29.211 1      1  0  1    0  1
0.95   149   0    4.901 0      .  1  0    0  0
0.46   20    0    0.658 0      0  0  1    0  1
1.2    1862  0   61.250 0      .  1  0    0  0
0.35   4     0    0.132 0      0  0  0    1  1
3.9    1574  0    9.671 1      1  0  0    1  1
2.9    1278  0   16.941 1      .  0  1    0  1
0.34   167   0    5.493 0      0  0  1    0  1
2.1    920   0   30.263 0      .  0  1    0  1
0.4    4102  0  134.934 0      .  0  1    0  0
2.55   1126  0   37.039 0      .  1  0    0  0
1.32   170   0    5.592 0      .  0  1    0  1
0.31   1128  0   37.105 0      0  0  1    0  1
1.1    5377  0  176.875 0      .  0  1    0  1
2.86   1340  0   11.546 1      1  0  1    0  1
1.6    1428  0   34.079 1      .  0  0    0  0
7.4    1350  0   44.408 0      .  0  1    0  1
3.4    1518  0   29.934 1      1  1  0    0  0
0.4    1091  0   35.888 0      0  1  0    0  0
1.3    639   1    5.987 1      .  1  0    0  1
2.5    78    0    2.566 0      1  0  1    0  0
0.26   1099  0   36.151 0      .  1  0    0  1
0.71   955   0   31.414 0      0  0  1    0  1
0.84   714   0   23.487 0      0  0  1    0  0
0.7    2464  0   59.112 1      0  0  1    0  1
0.36   145   0    4.770 0      0  0  1    0  0
2.1    1121  0   36.875 0      .  0  1    0  1
1.68   111   0    3.651 0      .  0  0    1  1
0.7    381   0   12.533 0      0  0  1    0  1
0.3    201   0    6.612 0      .  0  1    0  0
3      1148  0   37.763 0      1  0  1    0  1
5.1    118   0    3.882 0      .  0  0    1  1
2.2    8     0    0.263 0      1  0  0    0  1
3.1    1262  0   36.414 1      0  0  1    0  1
2.4    1148  0   37.763 0      0  0  0    1  0
3.8    15    0    0.493 0      1  0  1    0  1
3.6    1666  1   20.855 1      .  0  0    1  0
2.05   1493  0    1.645 1      0  0  1    0  0
0.83   1080  0   35.526 0      0  1  0    0  1
1.73   60    0    1.974 0      0  0  1    0  1
2.8    1071  0   35.230 0      1  0  1    0  1
1.05   259   0    8.520 0      1  1  0    0  0
0.68   1230  0   40.461 0      0  1  0    0  1
0.35   246   0    8.092 0      .  0  1    0  1
1.24   2492  0   50.461 1      0  0  1    0  1
1.1    338   0   11.118 0      0  0  1    0  0
2.38   890   1   29.276 0      0  0  1    0  1
0.9    12    0    0.395 0      .  0  0    1  1
3.2    1107  0   36.414 0      .  0  1    0  1
12     343   0    6.250 1      1  1  0    0  1
1.45   108   0    3.553 0      0  0  1    0  1
0.65   710   0   23.355 0      0  0  1    0  1
0.4    0     0    0.000 0      0  0  1    0  1
0.4    0     0    0.000 0      0  1  0    0  1
1.87   618   0   11.349 1      0  0  1    0  0
0.48   1078  0   35.461 0      0  1  0    0  1
0.9    931   0   30.625 0      .  0  0    1  1
0.18   880   0   28.947 0      0  1  0    0  0
2.3    438   0   14.408 0      1  0  1    0  1
0.4    1960  0   64.474 0      0  0  0    1  1
1.78   252   0    8.289 0      1  0  1    0  1
4.3    1773  0   49.375 1      .  0  1    0  1
0.27   157   0    5.164 0      0  1  0    0  0
0.45   71    0    2.336 0      0  0  0    0  1
0.35   1476  0   48.553 0      .  1  0    0  1
0.32   114   0    3.750 0      .  1  0    0  1
1.48   929   0   30.559 0      .  1  0    0  1
0.63   1155  0   37.993 0      0  1  0    0  1
0.4    79    0    2.599 0      .  1  0    0  0
0.4    2426  0   79.803 0      .  0  1    0  1
1.9    2396  1   73.750 1      .  0  1    0  0
0.28   91    0    2.993 0      .  0  1    0  0
0.45   39    0    1.283 0      .  0  0    1  0
4.1    151   0    4.967 0      1  0  0    1  1
1.3    22    0    0.724 0      .  1  0    0  0
1.15   24    0    0.789 0      .  1  0    0  0
0.55   596   0   19.605 0      .  0  0    1  1
0.4    1082  0   35.592 0      .  1  0    0  0
5      993   0   32.664 0      1  1  0    0  1
2.1    1085  0   35.691 0      .  1  0    0  1
2.25   224   0    7.368 0      .  0  1    0  1
4.5    99    0    3.257 0      1  1  0    0  0
0.9    3098  0  101.908 0      .  0  1    0  0
0.31   1182  0   38.882 0      .  1  0    0  1
1.83   1035  0    5.263 1      1  1  0    0  1
0.95   114   0    3.750 0      0  0  1    0  1
1.5    1124  0   36.974 0      .  0  0    0  0
0.87   773   0   25.428 0      0  1  0    0  0
3.08   669   1   22.007 0      0  0  1    0  1
2      1092  0   35.921 0      0  1  0    0  0
2.62   1107  0   36.414 0      0  0  0    1  0
2.62   1129  0   37.138 0      1  1  0    0  1
1.86   1715  0   48.717 1      0  0  1    0  1
1.52   1137  0   37.401 0      0  0  1    0  1
1.15   26    0    0.855 0      .  0  1    0  0
2.52   97    0    3.191 0      1  1  0    0  0
1.9    1085  0   35.691 0      1  1  0    0  0
1.8    1259  0   41.414 0      .  0  1    0  1
1.07   399   0   13.125 0      0  1  0    0  0
0.24   1026  0   33.750 0      0  1  0    0  1
0.8    957   0   31.480 0      .  0  0    0  1
5.2    1108  0   36.447 0      1  0  1    0  1
6      572   0   18.125 1      1  1  0    0  1
0.8    7     0    0.230 0      0  1  0    0  0
2.1    909   0   29.901 0      .  0  0    1  0
11     69    0    2.270 0      .  0  1    0  1
1.75   134   0    4.408 0      1  0  0    1  1
0.65   1096  0   36.053 0      0  0  1    0  0
8      2018  0   66.382 0      .  1  0    0  0
0.25   238   0    7.829 0      .  0  1    0  0
0.38   838   0   27.566 0      .  1  0    0  0
1.77   355   0   11.678 0      .  0  1    0  1
0.8    941   0   30.954 0      0  0  1    0  1
1.56   932   0   30.658 0      .  0  0    1  0
2.9    1100  0   36.184 0      .  0  1    0  1
1.45   1073  0   35.296 0      .  1  0    0  0
2      883   0   29.046 0      .  0  1    0  1
0.85   3639  0   84.441 1      .  0  0    1  1
2.11   728   0   12.895 1      1  0  0    1  0
11     1308  0    8.026 1      .  0  0    1  1
3.7    615   1   11.217 1      1  1  0    0  1
1.4    1477  0   38.289 1      0  0  1    0  1
3.4    948   0   21.711 1      .  1  0    0  0
2.1    1100  0   36.184 0      0  1  0    0  1
1.5    638   0   10.164 1      .  1  0    0  0
0.9    823   0   27.072 0      .  0  1    0  0
0.43   54    0    1.776 0      0  0  0    1  1
0.42   1044  0   34.342 0      0  0  0    1  1
5.38   76    0    2.500 0      .  1  0    0  1
1.28   1015  0   33.388 0      0  0  0    1  0
2      1036  0   34.079 0      1  0  0    1  0
1.15   1049  0   34.507 0      0  0  1    0  0
2.3    1055  0   20.428 1      0  0  1    0  1
0.66   687   0   22.599 0      0  0  0    1  1
1.23   1091  0   35.888 0      .  1  0    0  1
0.7    120   0    3.947 0      0  0  1    0  1
0.3    115   0    3.783 0      0  0  1    0  0
1.68   2690  0   62.730 1      0  1  0    0  1
1.6    553   0   18.191 0      1  0  1    0  0
4.4    27    0    0.888 0      .  1  0    0  0
5.94   47    0    1.546 0      0  0  0    1  1
1.4    49    0    1.612 0      0  0  1    0  1
2.2    678   0   22.303 0      .  0  1    0  1
0.92   896   0   29.474 0      .  0  0    1  1
1.8    747   1   15.164 1      1  0  1    0  1
2.73   4018  0  132.171 0      .  1  0    0  0
13     1122  0    3.717 1      1  1  0    0  0
0.6    1056  0   34.737 0      0  1  0    0  1
0.35   575   0   18.914 0      .  0  1    0  1
0.75   1235  1   27.961 1      0  1  0    0  1
1.05   925   0   30.428 0      .  0  1    0  1
0.86   232   0    7.632 0      0  1  0    0  1
4.62   455   0    6.809 1      1  1  0    0  1
2.2    114   0    3.750 0      0  1  0    0  0
2.5    21    0    0.691 0      .  1  0    0  1
0.64   554   0   18.224 0      0  0  1    0  0
3.3    1771  0   19.803 1      .  1  0    0  0
0.4    513   0   16.875 0      0  1  0    0  0
1.21   897   0    0.000 1      .  1  0    0  0
0.22   708   0   23.289 0      0  0  1    0  1
0.27   869   0   28.586 0      0  0  1    0  1
0.5    215   0    7.072 0      0  0  1    0  1
1.75   3748  0  123.289 0      .  0  1    0  0
4.42   979   0   24.375 1      0  1  0    0  0
2.55   1186  0   13.125 1      1  0  0    1  0
0.81   28    0    0.921 0      0  1  0    0  1
2.8    945   0   31.086 0      0  0  1    0  1
1.58   16    0    0.526 0      0  1  0    0  1
0.35   905   0   29.770 0      0  0  0    1  1
1.1    980   0   32.237 0      0  0  1    0  0
1.1    959   0   31.546 0      0  1  0    0  0
0.86   1017  0   33.454 0      0  0  1    0  1
1.08   206   0    6.776 0      .  1  0    0  0
2.55   501   0   14.112 1      1  0  1    0  1
1.78   847   0   27.862 0      1  1  0    0  0
0.76   785   0   25.822 0      0  1  0    0  0
0.8    271   0    8.914 0      0  1  0    0  0
2      1401  0   15.625 1      0  0  1    0  0
1.58   909   0   29.901 0      0  1  0    0  0
1.25   292   0    9.605 0      0  1  0    0  0
0.5    26    0    0.855 0      .  0  1    0  0
0.85   61    0    2.007 0      0  0  1    0  1
3      445   0   14.638 0      1  0  1    0  0
0.72   960   0   31.579 0      0  0  1    0  0
6      776   0   25.526 0      1  0  1    0  1
4.8    950   0   31.250 0      1  0  1    0  1
4.55   981   0   25.559 1      1  1  0    0  1
0.24   952   0   31.316 0      0  0  1    0  1
1.2    898   0   29.539 0      0  0  1    0  1
1.56   1909  0   33.125 1      .  0  1    0  0
0.85   182   0    5.987 0      .  0  1    0  1
1.04   1287  0   35.033 1      .  0  1    0  1
2      4281  1  129.638 1      .  0  1    0  1
1.5    653   0    4.671 1      .  0  0    1  1
1.87   741   0   11.579 1      .  0  1    0  1
3.5    200   0    6.579 0      0  0  1    0  1
1.52   506   0    0.987 1      0  0  1    0  1
0.47   379   0   12.467 0      0  0  1    0  1
1.25   891   0   29.309 0      0  1  0    0  0
1.82   614   0    5.395 1      0  1  0    0  0
3.3    754   0    7.664 1      .  0  1    0  1
1.24   902   0   29.671 0      0  0  1    0  0
0.56   3862  0   93.026 1      .  0  1    0  1
0.27   2372  0   78.026 0      0  0  1    0  1
5.2    683   0   22.467 0      1  0  1    0  1
1      702   0    4.934 1      1  0  1    0  0
0.3    962   0   31.645 0      0  1  0    0  0
2.1    954   0   31.382 0      0  0  1    0  0
1.86   919   0   30.230 0      0  1  0    0  1
2.2    73    0    2.401 0      .  0  0    1  0
1.75   875   0   28.783 0      0  1  0    0  0
1.04   392   0   12.895 0      .  0  1    0  0
2.03   2581  1   79.934 1      .  0  1    0  0
0.5    434   0   14.276 0      0  0  1    0  1
1.1    897   0   29.507 0      0  0  1    0  0
2.88   404   0   13.289 0      0  1  0    0  0
1.32   1646  0   54.145 0      .  1  0    0  1
0.4    910   0   29.934 0      0  1  0    0  1
0.8    955   0   31.414 0      .  0  1    0  1
0.35   125   0    4.112 0      .  0  0    1  1
2.9    285   1    2.632 1      1  0  1    0  0
8.2    291   0    6.612 1      1  1  0    0  1
1.25   108   0    3.553 0      .  0  0    1  1
1.22   1035  0   34.046 0      0  0  0    1  1
0.6    862   0   28.355 0      0  1  0    0  0
1.6    826   0   27.171 0      1  0  1    0  0
1.35   5099  0    9.013 1      0  0  1    0  0
2.25   2969  0   67.105 1      0  0  1    0  1
1.82   730   0   24.013 0      1  1  0    0  0
1      273   0    8.980 0      0  1  0    0  1
.      165   0    4.145 1      1  1  0    0  0
4.5    1672  0   28.355 1      1  1  0    0  0
2.3    843   1   19.243 1      1  0  1    0  1
0.72   9     0    0.296 0      0  0  0    1  0
0.5    707   0   23.257 0      .  0  1    0  1
0.52   11    0    0.362 0      0  1  0    0  1
3      468   1    6.875 1      1  1  0    0  0
0.65   372   0   12.237 0      1  0  1    0  1
0.9    1667  0   26.842 1      .  0  0    1  1
0.48   762   0   25.066 0      .  0  0    1  1
3      98    0    3.224 0      1  1  0    0  1
0.81   751   0   24.704 0      0  0  1    0  1
0.92   671   0   22.072 0      0  1  0    0  1
0.69   718   0   23.618 0      1  1  0    0  0
3      588   0   19.342 0      1  0  1    0  1
1.3    1460  0   48.026 0      1  0  1    0  1
0.32   771   0   25.362 0      0  0  0    1  0
3.8    4017  0   66.316 1      .  0  1    0  1
1.74   1058  0    1.678 1      0  1  0    0  1
0.1    1998  0   65.724 0      .  0  0    1  1
6      425   0   13.980 0      0  1  0    0  1
1      42    0    1.382 0      .  0  0    1  1
3.5    783   1   23.750 1      .  0  1    0  1
0.64   13    0    0.428 0      0  1  0    0  1
1.76   1277  0   27.204 1      0  1  0    0  0
1.85   811   0    0.000 1      .  1  0    0  0
3.8    2163  1   64.967 1      0  0  0    1  0
2.4    2029  0   54.112 1      0  1  0    0  1
0.61   17    0    0.559 0      .  0  1    0  0
1.1    866   0   28.487 0      .  0  0    1  1
10.6   95    0    3.125 0      .  0  0    1  1
1.04   142   0    4.671 0      .  1  0    0  0
2.5    817   0   26.875 0      1  1  0    0  0
2.49   53    1   -2.993 1      0  0  1    0  1
1.2    1491  0   26.941 1      .  1  0    0  1
1      385   0    0.000 1      0  0  1    0  1
3.6    805   0   26.480 0      1  0  0    1  1
2.3    1369  0   44.704 1      .  1  0    0  1
2.7    764   0    1.217 1      0  0  0    1  1
0.5    39    0    1.283 0      0  0  1    0  0
7      0     0    0.000 0      0  0  1    0  1
3      71    0    2.336 0      1  1  0    0  1
0.9    424   0   13.947 0      0  0  0    0  1
0.65   56    0    1.842 0      .  0  1    0  1
0.5    580   0   19.079 0      .  1  0    0  1
2.1    349   0   11.480 0      0  1  0    0  0
4      866   0   28.487 0      0  0  1    0  1
0.9    509   0   16.743 0      0  1  0    0  0
0.48   597   0   19.638 0      0  1  0    0  0
0.5    856   0   28.158 0      0  0  1    0  1
0.82   6     0    0.197 0      .  1  0    0  0
3      33    0    1.086 0      .  1  0    0  1
5.5    526   0   17.303 0      0  0  0    1  1
0.81   5292  0  166.447 1      .  0  1    0  1
0.67   1798  0    2.007 1      .  1  0    0  1
0.5    776   0   25.526 0      .  1  0    0  0
2.55   79    0    2.599 0      0  1  0    0  0
3.17   743   0   24.441 0      0  0  1    0  1
2.2    712   1   16.349 1      .  0  1    0  0
2.4    265   0    8.717 0      .  0  1    0  1
2.02   1045  0   34.375 0      0  0  0    1  1
1.02   1045  0   34.375 0      0  0  1    0  1
4.1    289   0    9.507 0      0  0  0    1  1
3      14    0    0.461 0      1  0  0    1  1
0.94   352   0   11.579 0      0  0  1    0  1
0.51   86    0    2.829 0      0  1  0    0  1
1.44   122   0    4.013 0      0  0  1    0  0
2.3    695   0   22.862 0      0  0  1    0  1
1.35   704   0   23.158 0      .  0  1    0  1
1.65   771   0   25.362 0      0  0  1    0  1
1.1    904   0   29.737 0      0  0  1    0  0
0.9    290   0    9.539 0      0  0  0    1  1
1.7    1008  0   10.132 1      0  1  0    0  0
0.25   46    0    1.513 0      .  0  1    0  0
5.5    744   0   24.474 0      .  1  0    0  0
2.05   270   0    8.882 0      1  0  1    0  .
2      707   0   12.237 1      .  0  0    1  1
0.71   609   0    0.888 1      .  0  1    0  1
1.95   757   0   24.901 0      .  0  1    0  1
2.8    719   0   23.651 0      1  0  1    0  0
4.5    573   0   18.849 0      1  1  0    0  0
1.03   581   0   19.112 0      0  0  1    0  0
1.5    536   0   17.632 0      1  0  0    1  1
4.1    510   0    9.408 1      1  0  1    0  0
4.7    869   0   10.066 1      1  0  1    0  1
1.1    620   0   20.395 0      .  0  1    0  1
2.77   688   1   11.579 1      1  0  0    1  0
0.51   513   0   16.875 0      .  1  0    0  0
5      444   0   14.605 1      1  0  1    0  1
2.6    31    0    1.020 0      0  0  0    1  0
1      321   0   10.559 0      .  0  0    0  1
2.6    1478  0   26.217 1      0  1  0    0  1
5.3    620   0   20.395 0      .  0  1    0  1
2.5    224   0    7.368 0      0  0  1    0  0
1.38   51    0    1.678 0      1  1  0    0  0
0.25   749   0   24.638 0      .  1  0    0  0
2.3    584   0   19.211 0      .  0  0    1  1
2.1    727   0   23.914 0      0  0  1    0  1
1.7    739   0   24.309 0      0  1  0    0  1
0.42   56    0    1.842 0      .  0  1    0  1
4      355   0   11.678 0      .  0  0    1  1
3.3    571   0   18.783 0      1  0  1    0  1
2.6    604   0   19.868 0      1  1  0    0  0
5.8    294   0    9.671 0      1  0  1    0  1
3.63   513   0   16.875 0      1  0  1    0  1
0.5    483   0   15.888 0      1  1  0    0  1
0.36   261   0    8.586 0      0  1  0    0  0
11     818   0   26.908 0      1  1  0    0  1
6      696   0   22.895 0      1  0  1    0  1
1      67    0    2.204 0      .  1  0    0  1
1.28   50    0    1.645 0      0  0  1    0  1
1.2    365   0   12.007 0      0  0  1    0  0
2.12   816   0   11.053 1      0  1  0    0  0
0.99   443   0   10.691 1      0  1  0    0  0
1.18   418   0   13.750 0      0  1  0    0  0
1.18   380   0   12.500 0      0  0  1    0  1
0.33   3975  0  130.757 0      0  0  1    0  0
0.88   680   0   22.368 0      0  0  1    0  1
2.82   468   0   15.395 0      0  0  1    0  1
1.12   412   0   13.553 0      0  1  0    0  0
1.32   2571  0   63.684 1      0  0  1    0  0
1.2    654   0   21.513 0      0  0  0    1  0
3.01   515   0   16.941 0      1  0  0    1  0
1.45   765   0   25.164 0      0  0  1    0  0
0.85   602   0   19.803 0      .  1  0    0  1
2.38   655   0   13.750 1      1  0  1    0  0
1.04   583   0   19.178 0      .  0  1    0  0
0.82   907   0   29.836 0      .  1  0    0  0
0.52   1055  0   34.704 0      0  0  1    0  0
0.9    566   0   18.618 0      .  1  0    0  0
1.32   1110  0   36.513 0      0  1  0    0  0
3      133   0    4.375 0      1  0  1    0  0
1.15   755   0   24.836 0      0  1  0    0  1
0.69   1052  0   34.605 1      .  0  1    0  1
1.4    455   0   14.967 0      0  0  1    0  0
3.08   631   0   20.757 0      .  1  0    0  1
1.1    889   0   29.243 0      .  0  1    0  1
1.75   504   0   16.579 0      0  1  0    0  0
3.2    156   0    5.132 0      0  1  0    0  1
1.72   605   0   19.901 0      0  1  0    0  1
1.37   603   0   19.836 0      1  1  0    0  1
3.75   539   1    0.724 1      1  1  0    0  0
1.62   946   0   31.118 0      .  1  0    0  0
0.32   25    0    0.822 0      0  1  0    0  1
3.8    32    0    1.053 0      0  1  0    0  1
0.24   2574  0   63.421 1      .  0  1    0  1
3.28   650   0   14.079 1      0  0  1    0  1
2.6    221   0    7.270 0      1  1  0    0  0
3.4    626   0   20.592 0      .  0  1    0  0
0.45   785   0   25.822 0      0  0  1    0  0
1.05   34    0    1.118 0      1  1  0    0  1
0.75   60    0    1.974 0      0  1  0    0  1
0.5    1568  0   12.697 1      1  0  0    1  1
2.5    567   0   18.651 0      1  1  0    0  1
1      487   0   16.020 0      .  0  1    0  0
0.35   211   0    5.724 1      1  1  0    0  0
3.5    296   0    9.737 0      0  0  1    0  1
3.1    559   0    2.632 1      1  0  0    0  1
1.75   3079  0   85.724 1      0  1  0    0  1
1      396   0   13.026 0      .  0  0    1  1
1.93   672   0   22.105 0      .  0  1    0  1
2.3    2976  0   77.862 1      0  1  0    0  0
2.92   547   0   17.993 0      .  0  1    0  1
0.7    602   0   19.803 0      1  0  1    0  1
2.8    18    0    0.592 0      .  1  0    0  0
0.72   336   0  -130.16 1      .  0  1    0  1
2.4    651   0    9.868 1      0  1  0    0  1
2.1    40    0    1.316 0      0  0  1    0  1
0.65   582   0   19.145 0      0  0  1    0  1
1.2    420   0   13.816 0      .  0  1    0  1
1.1    2460  1   62.368 1      .  .  .    .  0
2.4    2070  1   63.355 1      1  0  1    0  1
1.4    274   0    9.013 0      1  1  0    0  1
3.7    56    0    1.842 0      .  1  0    0  1
1.4    573   0   18.849 0      .  0  0    1  1
0.89   364   0   11.974 0      0  0  1    0  1
6.7    328   1    7.895 1      1  0  1    0  0
0.23   128   0    4.211 0      0  0  1    0  0
0.9    147   0    4.836 0      .  0  1    0  1
0.54   24    0    0.789 0      .  0  0    1  1
0.51   435   0   14.309 0      0  0  1    0  1
3.14   646   0   21.250 0      .  0  1    0  0
0.49   519   0   17.072 0      0  0  0    1  1
0.85   540   0   17.763 0      0  1  0    0  1
3.3    13    0    0.428 0      0  1  0    0  0
0.4    5873  0  178.947 1      0  0  0    1  1
1.89   435   0   14.309 0      0  1  0    0  0
0.57   543   0   17.862 0      1  1  0    0  1
2.25   540   0   17.763 0      0  0  1    0  1
1.6    817   0   26.875 0      1  0  1    0  1
0.23   546   0   17.961 0      0  0  1    0  0
3      453   0   13.750 1      0  0  1    0  1
0.35   362   0   11.908 0      0  1  0    0  0
1.5    2294  0   57.204 1      .  0  0    1  0
2.23   14    0    0.461 0      1  .  .    .  1
2.1    615   0   20.230 0      0  1  0    0  0
1      484   0   15.921 0      0  0  1    0  0
1.62   1753  0   39.934 1      0  1  0    0  1
2.3    590   0   19.408 0      .  0  1    0  0
3.41   410   0   13.487 0      0  1  0    0  1
1.05   137   0    4.507 0      0  1  0    0  1
1.55   47    0    1.546 0      0  1  0    0  1
1      706   0   23.224 0      .  0  1    0  1
1.05   203   0    6.678 0      0  1  0    0  1
1.76   277   0    9.112 0      0  0  1    0  1
6.9    580   0   12.434 1      .  0  1    0  1
2.46   549   0   12.007 1      0  1  0    0  1
0.72   14    0    0.461 0      .  0  0    1  1
0.45   99    0    3.257 0      0  0  1    0  0
0.83   488   0   16.053 0      0  1  0    0  0
0.26   571   0   18.783 0      0  0  1    0  0
1.33   1028  0   32.862 1      0  0  1    0  1
0.53   383   0   12.599 0      0  0  1    0  0
2.7    951   0   31.283 0      0  1  0    0  0
0.92   132   0    4.342 0      0  0  1    0  0
10     577   0   18.980 0      1  0  1    0  1
5.6    404   0   13.289 0      0  0  0    1  0
1      519   0   17.072 0      0  1  0    0  0
2.92   134   0    4.408 0      .  1  0    0  0
3.25   399   0   13.125 0      1  0  0    1  1
4.91   501   0   16.480 0      1  1  0    0  1
1.5    575   0   18.914 0      1  1  0    0  1
0.3    12    0    0.395 0      1  0  1    0  1
2.27   611   0   20.099 0      0  0  0    1  1
1.65   968   0   19.046 1      0  1  0    0  0
6.87   51    0    1.678 0      1  0  1    0  1
2.2    403   0   13.257 0      0  0  0    1  1
1.8    739   0   24.309 0      0  0  1    0  0
0.8    487   0   16.020 0      0  1  0    0  0
0.85   83    0    2.730 0      0  1  0    0  1
1.85   166   0    5.461 0      0  0  0    1  1
1      519   0    5.329 1      1  1  0    0  0
2.3    427   0   14.046 0      1  0  0    1  0
2.5    448   0   14.737 0      0  1  0    0  1
1.8    691   0   22.730 0      .  1  0    0  1
1.15   498   0   16.382 0      0  0  0    1  1
1.3    36    0    1.184 0      .  0  1    0  1
2.5    441   0   14.507 0      1  0  0    1  0
4.13   297   0    7.862 1      1  0  1    0  0
3.21   155   0    5.099 0      1  0  1    0  1
1.6    304   0   10.000 0      1  1  0    0  0
2.8    467   0   15.362 0      .  1  0    0  1
0.35   14    0    0.461 0      0  0  1    0  1
1.1    480   0   15.789 0      0  1  0    0  1
2.74   482   0   15.855 0      1  0  1    0  1
2.05   322   0   10.592 0      0  1  0    0  0
0.55   0     0    0.000 0      .  1  0    0  0
7.05   1953  0   53.618 1      .  0  1    0  1
5.8    1983  0   65.230 0      .  0  0    0  1
0.42   386   0   12.697 0      0  0  1    0  1
4.87   70    0    2.303 0      0  0  0    1  1
0.2    120   0    3.947 0      0  0  1    0  1
3.64   519   0   17.072 0      1  1  0    0  0
4.8    429   0   14.112 0      1  0  0    1  1
2      15    0    0.493 0      0  0  1    0  0
1.58   5079  0  162.138 1      0  1  0    0  1
3      395   0   12.993 0      1  0  1    0  1
0.42   388   0   12.763 0      .  0  1    0  1
1      478   0   15.724 0      1  0  1    0  0
2.75   1020  0   19.605 1      1  1  0    0  1
1.5    477   0   15.691 0      0  1  0    0  1
1.1    457   0   15.033 0      0  1  0    0  1
3.4    526   0   17.303 0      .  0  0    1  1
13     22    0    0.724 0      1  0  0    1  0
2.55   426   0    0.691 1      .  0  0    1  1
2.8    631   0   20.757 0      .  0  1    0  0
1.3    406   0   13.355 0      0  0  1    0  1
1.45   128   0    4.211 0      0  1  0    0  0
1.68   461   0   15.164 0      0  0  0    1  0
1.2    16    0    0.526 0      .  0  0    1  0
2.5    12    0    0.395 0      .  1  0    0  0
5      330   0   10.855 0      1  0  0    1  0
3.86   477   0   15.691 0      1  0  1    0  1
4      687   0   22.368 1      .  1  0    0  0
0.5    1859  0   61.151 0      0  0  1    0  0
2.6    396   0   13.026 0      0  0  0    1  0
1.08   469   0   15.428 0      .  1  0    0  1
0.75   482   0   15.855 0      .  0  1    0  1
2.45   449   0   14.770 0      0  1  0    0  1
1.75   480   0   15.789 0      1  0  1    0  0
0.63   265   0    8.717 0      .  1  0    0  0
2.32   468   0   15.395 0      1  0  1    0  0
0.82   410   0   13.487 0      .  1  0    0  0
3.35   386   0   12.697 0      1  1  0    0  0
1.87   454   0   14.934 0      0  1  0    0  0
0.8    726   0    6.612 1      .  1  0    0  1
3.13   446   0   14.671 0      1  0  1    0  0
0.4    388   0   12.763 0      .  0  0    1  0
1.04   468   0   15.395 0      0  1  0    0  0
0.52   245   0    8.059 0      .  0  1    0  0
0.43   416   0   13.684 0      0  1  0    0  0
1      303   0    9.967 0      0  1  0    0  0
0.3    153   0    5.033 0      .  0  0    1  1
1.04   404   0   13.289 0      1  0  0    1  1
0.58   354   0   11.645 0      0  0  1    0  1
2.57   635   0   20.888 0      1  0  1    0  1
0.98   80    0    2.632 0      0  0  1    0  0
1.26   169   0    5.559 0      .  0  0    1  0
0.3    816   0   26.842 0      1  1  0    0  1
1.72   343   0   11.283 0      0  1  0    0  0
2.35   241   0    7.928 0      1  1  0    0  0
0.4    346   0   11.382 0      1  0  1    0  0
0.4    403   0   13.257 0      0  1  0    0  0
1.29   394   0   12.961 0      .  0  1    0  1
6      341   0   11.217 0      0  0  1    0  1
1.05   100   0    3.289 0      0  0  1    0  1
1.4    23    0    0.757 0      0  0  1    0  0
1.04   259   0    7.007 1      1  1  0    0  1
0.68   1135  0   22.632 1      0  1  0    0  1
4.5    381   0   12.533 0      .  0  1    0  1
3.4    406   0   13.355 0      0  0  1    0  1
1.5    409   0   13.454 0      0  0  1    0  1
0.4    1368  0   45.000 0      0  1  0    0  0
0.6    11    0    0.362 0      .  0  0    1  1
0.5    379   0   12.467 0      1  0  0    1  0
0.47   931   0   29.934 1      0  0  1    0  0
2.5    435   0   14.309 0      1  1  0    0  0
3      28    0    0.921 0      1  0  0    1  1
10.2   426   0    1.316 1      0  1  0    0  1
2.1    49    0    1.612 0      0  1  0    0  0
0.3    15    0    0.493 0      0  1  0    0  0
1.75   372   0   12.237 0      0  1  0    0  0
0.3    430   0   14.145 0      0  0  1    0  1
1.1    154   0    5.066 0      0  0  1    0  1
3.1    384   0   12.632 0      1  1  0    0  1
3.7    256   0    8.421 0      .  0  0    1  1
2.25   315   0   10.362 0      1  0  1    0  1
2.75   169   0    5.559 0      1  0  1    0  1
5.3    598   0    6.645 1      0  0  1    0  0
2.25   403   0   13.257 0      0  0  0    1  1
2      333   0   10.954 0      0  1  0    0  1
0.77   389   0   12.796 0      .  0  1    0  1
0.85   438   0   14.408 0      1  1  0    0  0
1.4    560   0   18.421 0      0  0  1    0  1
1      680   0   22.368 0      0  1  0    0  0
2.35   153   0    5.033 0      1  0  1    0  1
0.5    182   0    5.987 0      0  0  0    1  1
1.2    49    0    1.612 0      0  0  1    0  0
1.3    360   0   11.842 0      0  0  1    0  1
5      306   0   10.066 0      1  1  0    0  0
2.34   1654  0   40.921 1      1  0  1    0  1
1.5    303   0    9.967 0      1  0  1    0  0
8      3482  0   93.980 1      .  1  0    0  0
1.75   1288  0   31.053 1      .  0  1    0  1
0.23   67    0    2.204 0      0  0  1    0  0
1      370   0   12.171 0      0  0  1    0  1
2.16   73    0    2.401 0      0  0  1    0  1
1.01   346   0   11.382 0      0  0  1    0  0
3.4    395   0   12.993 0      1  1  0    0  0
0.85   29    0    0.954 0      1  0  1    0  1
4.5    22    0    0.724 0      1  1  0    0  0
1.87   313   0   10.296 0      1  0  0    1  1
2.3    163   0    5.362 0      0  1  0    0  0
2.1    378   0   12.434 0      1  1  0    0  0
0.4    391   0   12.862 0      0  0  0    1  1
1.6    90    0    2.961 0      1  0  1    0  1
4.2    358   0   11.776 0      1  0  0    1  1
1      2039  0   67.072 0      .  0  0    1  1
1.72   609   0    7.993 1      0  0  1    0  1
4      624   0   13.191 1      1  1  0    0  0
1.6    307   1   10.099 1      1  1  0    0  1
0.64   357   0   11.743 0      0  0  1    0  1
2.45   280   0    0.099 1      0  0  1    0  0
0.55   24    0    0.789 0      .  1  0    0  0
0.4    181   0    5.954 0      0  0  0    1  1
1.2    281   0    9.243 0      0  0  1    0  1
0.94   1968  0   57.368 1      .  1  0    0  1
0.32   36    0    1.184 0      0  0  1    0  0
0.86   921   0   18.717 1      0  0  0    1  1
0.65   361   0   11.875 0      .  0  0    1  0
2.25   344   0   11.316 0      0  0  1    0  1
1.5    799   0   15.230 1      .  1  0    0  0
5.5    1703  0   56.020 0      0  0  1    0  1
0.3    175   0    5.757 0      0  0  0    1  0
1.4    226   1    1.743 1      .  0  1    0  1
3.87   330   0   10.855 0      1  1  0    0  0
1.1    214   0    7.039 0      1  0  1    0  1
0.4    238   0    7.829 0      0  1  0    0  0
0.8    57    0    1.875 0      .  1  0    0  1
1.8    469   0   15.428 0      0  1  0    0  0
0.34   4467  0  146.941 0      0  0  1    0  0
0.8    2823  0   81.776 1      0  0  0    1  0
0.6    292   0    9.605 0      0  1  0    0  0
0.57   305   0   10.033 0      0  1  0    0  0
2.87   370   0   12.171 0      0  1  0    0  0
0.4    132   0    4.342 0      0  1  0    0  0
8      260   0    5.197 1      1  0  0    0  0
0.65   231   0    7.599 0      0  0  0    1  0
0.8    268   0    8.816 0      1  0  1    0  1
4      1306  0   36.250 1      .  1  0    0  1
1.04   280   0    9.211 0      0  0  0    1  0
0.3    206   0    6.776 0      0  0  1    0  1
3.63   199   0    6.546 0      0  1  0    0  1
2.2    336   0   11.053 0      0  1  0    0  0
1.62   338   0   11.118 0      .  0  1    0  0
0.6    351   0   11.546 0      0  1  0    0  0
1      69    0    2.270 0      1  1  0    0  0
0.63   1428  0   40.592 1      0  1  0    0  0
3.37   92    0    3.026 0      0  0  1    0  1
0.38   424   0   13.947 0      .  0  1    0  0
1      35    0    1.151 0      0  1  0    0  0
1.5    396   0   13.026 0      0  0  1    0  0
1.2    52    0    1.711 0      0  0  0    0  1
1.42   54    0    1.776 0      0  0  0    1  1
1.7    95    0    3.125 0      0  1  0    0  0
1.1    1063  0   26.480 1      0  1  0    0  0
5.75   75    0    2.467 0      1  0  0    1  0
4.1    279   0    9.178 0      1  0  0    1  1
2.6    142   0    4.671 0      0  1  0    0  0
5.12   180   0    5.921 0      1  0  0    1  1
2.5    2689  0   71.414 1      1  1  0    0  1
2      93    0    3.059 0      0  1  0    0  1
0.24   203   0    6.678 0      0  1  0    0  0
1.35   319   0   10.493 0      0  0  1    0  0
0.32   123   0    4.046 0      0  0  0    1  1
0.61   94    0    3.092 0      .  1  0    0  1
0.59   245   0    8.059 0      0  1  0    0  1
2.5    1612  0   51.743 1      1  0  1    0  0
1.45   61    0    2.007 0      .  1  0    0  0
1.3    292   0    9.605 0      1  1  0    0  1
1.5    233   0    7.664 0      .  1  0    0  1
1.8    243   0    0.625 1      .  1  0    0  0
0.4    35    0    1.151 0      .  1  0    0  0
4.55   322   0   10.592 0      0  1  0    0  1
7.25   10    0    0.329 0      1  1  0    0  0
2.5    3963  0  129.605 1      .  1  0    0  1
1      57    0    1.875 0      0  0  1    0  1
1.59   344   0   11.316 0      0  0  1    0  1
0.4    204   0    6.711 0      0  0  1    0  0
1.51   150   0    4.934 0      0  0  0    1  1
8      349   0   11.480 0      0  1  0    0  0
0.85   363   0   11.941 0      0  0  1    0  1
1.85   227   0    7.467 0      1  1  0    0  0
1.3    281   0    9.243 0      0  0  0    1  0
0.78   217   0    7.138 0      0  1  0    0  0
0.5    334   0   10.987 0      0  1  0    0  1
0.28   952   1   29.046 1      0  0  1    0  1
2.5    118   0    3.882 0      1  1  0    0  0
4      183   0    6.020 0      0  0  0    1  1
1.5    24    0    0.789 0      0  1  0    0  0
4.5    626   0   20.592 0      0  0  1    0  1
1.42   285   0    9.375 0      0  0  1    0  1
1.3    303   0    9.967 0      0  1  0    0  0
0.65   37    0    1.217 0      0  0  1    0  1
1.92   285   0    9.375 0      1  1  0    0  1
3      315   0   10.362 0      1  0  1    0  0
0.8    240   0    7.895 0      .  1  0    0  1
0.82   174   0    5.724 0      0  0  1    0  1
4.6    36    0    1.184 0      1  0  1    0  1
3.7    237   0    7.796 0      1  1  0    0  0
2.89   315   0   10.362 0      1  0  0    1  1
4      287   0    9.441 0      1  1  0    0  0
6.2    35    0    1.151 0      1  0  1    0  1
0.9    242   0    7.961 0      0  0  1    0  1
5      265   0    8.717 0      1  0  0    1  1
0.34   210   0    6.908 0      0  0  1    0  0
1.35   142   0    4.671 0      0  1  0    0  1
0.4    225   0    7.401 0      0  1  0    0  0
7.4    559   1   10.461 1      .  0  1    0  0
0.95   221   0    7.270 0      0  0  1    0  1
1.68   43    0    1.414 0      0  0  0    1  0
1.95   33    0    1.086 0      0  0  0    1  1
0.7    48    0    1.579 0      0  1  0    0  0
0.33   59    0    1.941 0      0  1  0    0  0
1.9    236   0    7.763 0      .  0  1    0  1
2.8    264   0    8.684 0      0  0  0    1  1
7      48    1    1.579 0      1  0  1    0  1
6      253   0    8.322 0      0  0  1    0  1
0.3    357   0   11.743 0      .  1  0    0  0
0.8    216   0    7.105 0      .  0  1    0  0
1.25   999   0   14.507 1      0  1  0    0  0
1.6    490   0    9.112 1      .  0  0    1  1
1.4    225   0    7.401 0      .  1  0    0  1
0.3    5016  0  132.138 1      0  0  0    1  0
1.14   252   0    8.289 0      1  0  0    1  1
0.95   255   0    8.388 0      0  1  0    0  0
0.61   213   0    7.007 0      0  1  0    0  1
1.1    216   0    7.105 0      1  1  0    0  0
0.51   195   0    6.414 0      .  1  0    0  1
2.2    641   0   11.053 1      0  1  0    0  0
1.95   245   0    8.059 0      1  0  1    0  1
4      726   0   16.250 1      .  0  0    0  1
1      1939  0   44.507 1      0  0  1    0  0
0.92   128   0    4.211 0      .  0  0    1  0
3.12   255   0    8.388 0      0  0  1    0  1
2.75   170   0    5.592 0      1  1  0    0  1
3.4    120   0    3.947 0      1  0  1    0  1
1.39   428   0   14.079 0      1  0  1    0  1
1.22   235   0    7.730 0      0  1  0    0  0
2.8    258   1    5.855 1      1  0  0    1  0
0.8    219   0    7.204 0      1  1  0    0  1
0.6    14    0    0.461 0      0  1  0    0  0
1.01   2430  0   71.809 1      0  0  1    0  1
0.65   1000  0   23.882 1      0  0  1    0  1
12.6   41    0    1.349 0      1  0  1    0  0
1.5    243   0    7.993 0      0  1  0    0  0
0.76   196   0    6.447 0      0  1  0    0  0
11     168   0    5.526 0      .  1  0    0  0
3.5    151   0    4.967 0      1  1  0    0  1
1.5    328   0   10.789 0      1  0  0    1  1
1.25   2661  0   79.671 1      0  0  0    1  1
0.6    1421  0   46.743 0      0  0  1    0  1
0.82   155   0    5.099 0      0  0  1    0  1
0.8    11    0    0.362 0      0  1  0    0  1
0.5    123   0    4.046 0      .  0  0    1  1
0.74   224   0    7.368 0      0  0  1    0  1
5.03   413   0    5.855 1      1  0  1    0  1
2      28    0    0.921 0      1  0  1    0  1
1.3    74    0    2.434 0      1  0  1    0  0
3.5    625   0   12.928 1      1  1  0    0  1
2.03   227   0    7.467 0      0  1  0    0  0
0.8    62    0    2.039 0      0  1  0    0  0
3.75   1022  0   25.855 1      1  1  0    0  0
0.2    210   0    6.908 0      0  0  0    1  0
1.5    139   0    4.572 0      0  0  0    1  0
3.6    141   0    4.638 0      1  0  1    0  0
2.25   9     0    0.296 0      .  1  0    0  0
3      120   0    3.947 0      .  0  1    0  1
0.9    2470  0   81.250 0      1  0  1    0  1
2.5    209   0    6.875 0      .  0  1    0  1
1.6    14    0    0.461 0      1  0  1    0  0
3.15   212   0    6.974 0      1  1  0    0  0
1.7    123   0    4.046 0      1  1  0    0  0
0.2    149   0    4.901 0      0  1  0    0  1
0.6    120   0    3.947 0      0  0  1    0  1
1.25   97    0    3.191 0      .  0  1    0  1
1.85   21    0    0.691 0      0  1  0    0  0
2.15   3732  0  120.428 1      .  1  0    0  1
1.4    113   0    3.717 0      .  0  1    0  1
0.25   145   0    4.770 0      0  0  0    1  1
1.65   151   0    4.967 0      .  1  0    0  0
1.05   140   0    4.605 0      0  0  1    0  0
1.9    1035  0   34.046 0      1  1  0    0  1
1.4    49    0    1.612 0      .  1  0    0  0
3.2    14    0    0.461 0      1  0  1    0  1
2.25   162   0    5.329 0      .  1  0    0  0
1.56   415   0   13.651 0      0  0  1    0  1
3.1    62    0    2.039 0      0  1  0    0  0
1.05   52    0    1.711 0      .  1  0    0  1
0.45   280   0    7.697 1      .  0  1    0  1
7.68   4887  0  131.546 1      0  1  0    0  0
3      177   0    5.822 0      0  1  0    0  0
1.1    169   0    5.559 0      0  1  0    0  1
1.35   2540  1   59.605 1      0  0  1    0  1
0.18   1448  0   47.632 0      0  1  0    0  1
0.75   1     0    0.033 0      0  0  1    0  1
0.26   2167  0   71.283 0      0  0  1    0  1
1      1567  0   51.546 0      0  1  0    0  1
0.7    4691  0  154.309 0      0  0  1    0  0
0.35   6     0    0.197 0      0  0  0    1  1
3.5    629   0   20.691 0      1  0  0    1  1
2.5    239   0    7.862 1      0  0  1    0  1
0.35   2407  0   79.178 0      0  0  0    0  1
0.59   230   0    7.566 0      1  0  1    0  0
0.3    768   0   25.263 0      .  1  0    0  1
1.1    462   0   15.197 0      1  0  1    0  1
2.5    866   0   28.487 0      0  0  1    0  1
1.25   674   0   22.171 0      .  1  0    0  1
2.3    1645  0   54.112 0      1  0  0    1  1
0.9    455   0    7.862 1      .  0  0    1  1
1      1531  0   50.362 0      0  0  1    0  1
1.31   2639  0   86.809 0      0  0  1    0  1
1      289   0    9.507 0      .  1  0    0  1
0.95   1857  0   45.033 1      0  0  1    0  1
0.7    939   0   30.888 0      1  0  1    0  1
0.45   300   0    9.868 0      0  0  1    0  1
0.18   19    0    0.625 0      0  0  1    0  1
5      633   1   20.822 0      1  0  0    1  1
0.32   83    0    2.730 0      0  1  0    0  0
3      82    0    2.697 0      0  0  1    0  1
2.2    185   0    6.086 0      .  0  1    0  1
0.6    57    0    1.875 0      0  1  0    0  1
0.7    406   0   13.355 0      0  0  0    1  1
1.5    583   0   19.178 0      .  0  1    0  1
0.75   955   1   11.118 1      .  0  0    1  1
2.3    1710  0   48.191 1      0  0  1    0  1
0.7    161   0    3.849 1      0  0  1    0  0
1.5    1364  0   44.868 0      0  0  1    0  1
0.5    36    0    1.184 0      0  0  1    0  1
0.75   67    0    2.204 0      0  0  1    0  1
0.75   811   0   26.678 0      0  0  1    0  1
0.2    518   0   17.039 0      0  1  0    0  1
2.54   297   0    9.770 0      0  0  1    0  0
0.73   57    0    1.875 0      0  0  0    1  1
0.9    65    0    2.138 0      0  1  0    0  1
0.4    116   0    3.816 0      0  1  0    0  0
3.5    20    0    0.658 0      .  0  0    1  1
2.75   179   0    5.888 0      1  0  1    0  1
0.45   264   0    8.684 0      0  1  0    0  1
1.7    1158  0   38.092 0      .  0  1    0  1
2.2    2957  0   60.099 1      0  1  0    0  1
0.34   302   0    9.934 0      0  0  1    0  1
1.8    1605  0   41.579 1      1  1  0    0  1
6.75   69    0    2.270 0      0  1  0    0  0
1.38   315   0   10.362 0      .  0  1    0  1
1.56   1311  0   39.211 1      0  0  1    0  1
0.58   2271  0   66.118 1      0  0  1    0  0
3.48   168   0    2.171 1      0  0  0    1  1
1.38   3406  0   93.355 1      0  0  1    0  1
0.75   1249  0   31.645 1      0  1  0    0  1
6.5    540   1    5.263 1      0  0  1    0  1
3.4    3149  0   60.066 1      .  0  1    0  0
2.1    694   0    0.691 1      0  0  0    1  1
0.75   1545  0   50.822 0      .  0  1    0  1
1.1    4152  0   32.533 1      .  1  0    0  1
2.3    1369  0   45.033 0      1  1  0    0  0
1      281   0    9.243 0      0  0  1    0  0
2.58   1775  0   44.276 1      .  0  1    0  1
3.5    171   0    5.625 0      1  0  0    1  1
4.5    182   0    5.987 0      1  0  0    1  0
3      191   0    6.283 0      0  1  0    0  0
2.1    332   0   10.921 0      1  1  0    0  0
3.3    162   0    5.329 0      1  1  0    0  1
1.15   157   0    5.164 0      .  1  0    0  0
1.2    1125  0   10.099 1      .  0  1    0  1
2.7    306   0   10.066 0      0  0  1    0  1
1.3    134   0    4.408 0      0  0  1    0  1
1.6    2163  0   43.980 1      0  0  1    0  0
8.1    493   0   16.217 0      1  0  0    0  0
5.7    707   0   16.711 1      .  1  0    0  1
2.89   170   0    5.592 0      .  0  1    0  1
2.24   196   0    6.447 0      1  0  1    0  1
1.47   170   0    5.592 0      .  0  0    1  1
4      492   0   14.112 1      .  0  1    0  1
1.1    149   0    4.901 0      .  1  0    0  0
1.43   335   0   11.020 0      1  0  0    1  1
1.49   163   0    5.362 0      0  0  0    1  1
1.96   647   0   11.842 1      1  1  0    0  1
1.1    143   0    4.704 0      1  0  1    0  1
2.24   7480  0  235.559 1      0  0  1    0  1
4.18   162   0    5.329 0      1  0  0    1  1
1.1    1402  0   46.118 0      .  0  0    1  0
6.5    122   0    4.013 0      1  1  0    0  1
;
--------------153065EB5961--






*************************************************************************
*************************************************************************

EXAMPLE CODE USED IN THIS BOOK



**************************************************
/*The following example code appears on page 31.*/
**************************************************

Example 2.1
                   
data; 
        input time d @@;
        cards;
0.0493 1   0.2849 1   0.4082 1   0.8767 1   0.8877 1   1.1233 1   
1.2247 0   1.3753 1   1.5425 1   1.5836 1   1.7397 1   1.7589 1   
1.7726 1   1.9233 1   1.9562 0   2.0493 1   2.2986 1   2.3425 1   
3.7315 1   4.0548 1   4.0685 0   4.5863 1   4.9534 1   5.1534 0   
5.7315 0   5.8493 1   5.8685 1   6.0712 0   6.1151 0   7.3781 0   
7.6630 0   8.0438 0   8.1890 0   8.2055 0   8.2548 0   8.4274 0   
8.4521 0   8.7589 0   9.0356 0   9.8959 0   9.9151 0   9.9178 0  
10.1151 0  10.4027 0  10.6000 0  10.6603 1  10.6685 0  10.7260 0  
10.9260 0  10.9370 0  11.2027 0  11.4548 0  11.4712 0  11.5589 0  
11.6082 0  11.6164 0  11.6521 0  11.7123 0  11.7671 0  11.8466 0  
11.8575 0  11.8685 0  11.9863 0  12.0082 0
;
 
proc lifetest plots=(s); 
      time time*d(0);
run;



******************************************************
/*The following example code appears on page 37.     */
******************************************************

Example 2.2


%kmtable(
         dataset= leuk    /* default is _last_ */
                          /* default is 95 for 95% CI */
         ,time= time      /* time variable */
         ,cens=d          /* variable indicating censored
                             or complete times */
         ,censval= 0      /* value(s) that indicate censored
                             observation */
         ,method= 2       /* 1 for method used in Proc Lifetest
                             2 for method that yields limits in     
                            (0,1) */
         ,variance=p      /* G or g for Greenwood's formula, P or   
                             p for Peto's formula */
                          /* optional variable for separate         
                             tables  */
                          /* yes (default) to print table, no to
                             suppress printing */
)



/* or equivalently      */


%kmtable(dataset=leuk, time=time, cens=d, censval=0, method=2
         variance=p)



******************************************************
/*The following example code appears on page 40.     */
******************************************************

Example 2.3


%kmplot(
         mark= yes      /* yes to mark times on curve,
                           no (default) to not mark times */
         ,ci= yes       /* yes for confidence intervals,
                           no (default) for no ci's */
                        /* yes to produce multiple plots
                           on the same graph, no (default)
                           for separate plots */
                        /* label for the horizontal axis,
                           default is time */
                        /* label for the vertical axis,
                           default is Pct Survival */

         ,title= Figure 2.4 /* default is Kaplan-Meier Survival     
                           Curve */
                             /* clause to restrict curve(s),        
                              usually of form time < value or r     
                           < value (for n at risk)*/
)



******************************************************
/*The following example code appears on page 44.     */
******************************************************

Example 2.4

%kmplan(               
        acctime=4 to 6   /*accrual time, can be range*/
        ,futime=2 to 4   /*post-accrual follow-up
                            time, can be range*/ 
        ,accrate=20 to 60 by 20 /*accrual rate, can be range*/
        ,lossrate=.05    /*loss rate, default is 0*/

        ,t=3             /*t for which projected se of
                            KM estimate of S(t) is wanted*/
                          /*assumed value of S(t), default 
                            0.5 which is conservative*/
        )


/*   or equivalently   */


%kmplan(acctime=4 to 6, futime=2 to 4, accrate=20 to 60 by 20, 
        lossrate=.05, t=3)



******************************************************
/*The following example code appears on page 48.     */
******************************************************

Example 2.5


data ex1;
     input l r f;
     cards;
0 2  1
1 3  1
2 10 4
4 10 4
;
run;
%ice(data=ex1, time=(l r), freq=f, options=plot)


**************************************************
/*The following example code appears on page 123.*/
**************************************************


/* Get Survival Estimates for Those with Ulcers   */

proc lifetest data = melanoma noprint outs = ulcers   ;
   time dfstime*dfscens(0);
   where ulcer = 1;

/* Get First for Each Month and Calculate log of -log of            
 Survival   */

data ulcers; 
     set ulcers; 
     month = int(dfstime);
proc sort; 
     by month dfstime;
data x; 
     set ulcers; 
     by month; 
     if first.month;
     loglogs0= log(-log(survival));
run;

/* Repeat for Those without Ulcers */

proc lifetest data = melanoma noprint outs = noulcers ;
     time dfstime*dfscens(0);
     where ulcer = 0;

data noulcers; 
     set noulcers; 
     month = int(dfstime);
     surv1=survival;
proc sort; 
     by month dfstime;
data y; 
     set noulcers; 
     by month; 
     if first.month;
     loglogs1 = log(-log(survival));

/* Merge and Get Differences of log(-log(S)) */

data;
     merge x y;
     by month;
     diff = loglogs1 - loglogs0;

/* Print.  Differences Should be Approximately Constant for         
 Proportional Hazards Assumption */

proc print noobs;
     var month loglogs1 loglogs0 diff;
     where  month in (12 18 24  30 36 42 48);
run;


**************************************************
/*The following example code appears on page 132.*/
**************************************************

%phpow(
       p00=0.35       /* Proportion with x1=0, x2=0 */
      ,p01=0.15       /* Proportion with x1=0, x2=1  */
      ,p10=0.35       /* Proportion with x1=1, x2=0 */  
      ,s00=0.5        /* A survival probability for                 
                       x1=x2=0 */ 
      ,t00=3          /* The time associated with s00 */
      ,s01=0.7        /* A survival probability for x1=0,           
                       x2=1 */
      ,t01=3          /* The time associated with s01 */
      ,s10=0.65       /* A survival probability for x1=1,           
                       x2=0 */
      ,t10=3          /* The time associated with s10 */
      ,t=5            /* Accrual time */
      ,tau=3          /* Post accrual follow-up */
      ,power=0.8      /* Power of test. (optional)
      ,n=             /* Sample Size.  (optional) Note:  power      
                       or n but not both, must be given */
)




*************************************************************************
*************************************************************************

MACRO CODE USED IN THIS BOOK

The following macros are presented in this file:

CHECKDIST
KMTABLE
KMPLAN
KMPLOT
LINRANK
MANTBYAR
PARAMEST
PHPLOT
PHPOW
SURVPOW



**************************************************
/*The following macro appears on page 177.       */
**************************************************

                                     
18.2  The CHECKDIST Macro

%macro chekdist(data = _last_ , time = , cens = , censvals = 0 ,
                model = , pi = ) ;
%if "&model" = "exp" %then %do;
     proc lifetest data = &data noprint plots = (ls)  graphics;
          time &time*&cens(&censvals);
     %end;
%if "&model" = "weibull" %then %do;
     proc lifetest data = &data noprint plots = (lls) graphics;
          time &time*&cens(&censvals);
     %end;
%if "&model" ne "weibull" and "&model" ne "exp" %then %do;
     proc lifetest data = &data noprint outs = out;
          time &time*&cens(&censvals);
          axis1 label = (a = 90);
     %end;
%if "&model" = "lognorm" %then %do;
     data; 
          set out;
          x = log(&time);
          y = -probit(survival);
          label x = 'log(t)';
          label y = '-probit(survival)';
     proc gplot;
          plot y*x /vaxis = axis1;
     %end;
%if "&model" = "expcure" %then %do;
     data; 
          set out;
          do pi = &pi ;
               y = log((survival - pi)/(1 - pi));
               output;
          end;
     label y = 'log[(survival-pi)/(1-pi)]';
     %end;
%if "&model" = "gomp" %then %do;
     data; 
          set out;
          do pi = &pi;
               y=log(1-log(survival)/log(pi));
               output;
               end;
          label y = 'log[1-log(survival)/log(pi)]';
          %end;
%if "&model" = "gomp" or "&model" = "expcure" %then %do;
     proc gplot;
          plot y*t = pi /vaxis = axis1;
     %end;
%mend;


******************************************************
/*The following macro appears on page 52.            */
******************************************************

11.4  The KMTABLE Macro

/* Note:  Although the book says that you can use more than one by
variable, that is not the case.  Only one by variable can be specified.
As a "workaround", you can create one by variable from several by
contatenation. For example if you want tables by byvar1 and byvar2,
define byvar = byvar1||byvar2.  */

%macro kmtable(dataset=_last_     /*    dataset used by macro */
               ,pct=95            /*    for conf. int. */
               ,time=             /*    time variable  */
               ,cens=             /*    variable that indicates
                                        censored or complete time */
               ,censval=          /*    value(s) that indicate
                                        censored time */
               ,method=           /*    1 for conf. int. method used
                                        in Proc Lifetest, 2 for
                                        method that yields limits in
                                        (0,1) */
               ,variance=         /*    G or g for Greenwood=s
                                        formula, P or p for Peto=s
                                        formula */
               ,byvar=none        /*    Optional by variable(s) for
                                        separate tables */
               ,print=yes         /*    no to suppress printing */
);
%global byvari perc ttime;
%let byvari=&byvar;
%let perc=&pct;
%let ttime=&time;
data &dataset;
     set &dataset;
     none=1;
run;
proc sort data=&dataset;
     by &byvar;
run;

/*  Create dataset, x, with survival estimates */
proc lifetest noprint outs=x data=&dataset;
     by &byvar;
     time &time*&cens(&censval);
run;
proc sort out=y;
     by &byvar &time;
run;
/* Add number at risk, r, to dataset */
data y;
     set y;
     by &byvar;
     if first.&byvar then r=0;
     else r+1;
     keep r &byvar;
run;
/* Merge number at risk with survival estimates */
proc sort;
     by &byvar descending r;
run;
data table;
     merge x y;
run;
proc sort;
     by &byvar descending r;
run;
/* Create Life Table */
data table;
     set table;
     by &byvar;
             /* Allow for G or P, check for valid values,
                if mis-specified, set values and put
                warning in log.                          */
     if _n_ = 1 then do;
        %if &variance = G %then %let variance=g;
        %if &variance = P %then %let variance=p;
        if "&variance" not in ('g', 'p') then do;
                put;
                put '*************************************';
                put '*Note: Invalid value of variance used*';
                put '*for choice of variance formula.  g *';
                put '*for Greenwood will be used.        *';
                put '*************************************';
                put;
        end;
        if &method not in (1, 2) then do;
                put;
                put '*************************************';
                put '*Note:  Invalid value of method used*';
                put '*for choice of CI. Method 1 (as in  *';
                put '*Proc Lifetest) will be used.       *';
                put '*************************************';
                put;
        end;
     end;
                  /* defaults for variance and conf int method */
     %if &variance ne g and &variance ne p %then
          %let variance =g;
     %if &method ne 1 and &method ne 2 %then
          %let method = 1;
                 /* normal critical value for conf. int. */
     z=-probit((100-&pct)/200);
     d=1-_censor_;
                 /* Peto s.e. */
     sp=survival*sqrt((1-survival)/r);
                 /* Greenwood s.e. */
     if first.&byvar then do;
        sum=0;
        stderr=0;
     end;
     else do;
        sum+d/(r*(r+1));
        sg=survival*sqrt(sum);
     end;
     if "&variance"='g'
          then stderr=sg;
     if "&variance"='p'
          then stderr=sp;
  /*  Confidence interval limits */
     if &method=1 then do;
        lcl=survival-z*stderr;
        lcl=max(0,lcl);
        ucl=survival+z*stderr;
        ucl=min(1.00, ucl);
     end;
     if &method=2 then do;
        s=-stderr/log(survival)/survival;
        lcl=survival**(exp(z*s));
        ucl=survival**(exp(-z*s));
     end;
     if first.&byvar then do;
        stderr=0;
        lcl=1;
        ucl=1;
     end;
  /*  Create column label for table */
     %if &variance=g %then
          label stderr = 'Greenwood*stderr';;
     %if &variance = p %then
          label stderr = 'Peto*stderr';;
     %if &method = 1 %then %do;
        label lcl= "Method 1*&pct pct lcl";;
        label ucl="Method 1*&pct pct ucl";;
     %end;
     %if &method =2 %then %do;
        label lcl = "Method 2*&pct pct lcl";;
        label ucl = "Method 2*&pct pct ucl";;
     %end;
run;
proc sort;
  by &byvar;
run;
/* Print life table  */
%if &print = yes %then %do;
        proc print l split='*';
     var  &time d survival stderr lcl ucl;
  %if &byvar ne none %then by &byvar;;
%end;
run;
%mend kmtable;




******************************************************
/*The following macro code appears on page 54.       */
******************************************************

11.5  The KMPLOT Macro



%macro kmplot(mark=no                        /*   yes to mark times    
                                               on curve */
              ,ci=no                         /*   yes for conf.        
                                               intervals */
              ,ylabel= Pct Survival          /*   label for y axis */
              ,xlabel=time                   /*   label for x axis */
              ,combine=no                    /*   yes to put multiple  
                                             plots on same        
                                             graph */
              ,cutoff=none                   /*   clause to restrict   
                                                  curve(s), usually    
                                             of form time<value   
                                             or r<value (for n    
                                             at risk) */
              ,title= Kaplan-Meier Survival Curve
);
/* no conf. interval if multiple plots on graph */
%if &combine=yes %then %let ci=no;;
/* Define symbol statements */
%if &combine&mark=yesno %then %do;
   symbol1 l=1 f= , v=none  i=stepjl w=5;
        symbol2 l=3 f= ,v=none i=stepjl w=5;
        symbol3 l=5 f= ,v=none i=stepjl w=5;
        symbol4 l=33 f= ,v=none i=stepjl w=5;
          %end;
%if &combine&mark=yesyes %then %do;
        symbol1 l=1 f=swiss v="|" i=stepjl w=5;
        symbol2 l=3 f=swiss v="|" i=stepjl w=5;
        symbol3 l=5 f=swiss v="|" i=stepjl w=5;
        symbol4 l=33 f=swiss v="|" i=stepjl w=5;
    %end;

%if &combine&mark=noyes %then %do;
        symbol1 l=1 f=swiss v="|" i=stepjl w=5;
        symbol2 l=3 f= ,v=none i=stepjl w=5;
        symbol3 l=3 f= ,v=none i=stepjl w=5;
%end;
%if &combine&mark=nono %then %do;
        symbol1 l=1 f= , v=none i=stepjl w=5;
        symbol2 l=3 f= , v=none i=stepjl w=5;
        symbol3 l=3 f= , v=none i=stepjl w=5; 
   %end;
/* White out by if no by variables */
%if &byvari=none %then goptions cby=white;;
/* Create dataset for plot(s) */
data; 
     set table; 
     survival=survival*100;
     lcl=100*lcl;
     ucl=100*ucl;
     y=survival; 
     curve=1; 
     output;
     y=ucl; 
     curve=2;
     %if &ci=yes %then output;;
     y=lcl; 
     curve=3;
     %if &ci=yes %then output;;
run;
proc sort; 
  by &byvari curve &ttime;
run;
proc format;
  value curve 1='KM curve' 2='UCL' 3='LCL';
run;
/* Define axes and legends */
axis1 width=5 minor=none 
      label=(h=3 f=swissb a=90 j=center 
      "&ylabel")
      value = ( h=1.5 f=swissb) order=(0 to 100 by 10);
axis2 width=5 
      label=(h=3 f=swissb  "&xlabel") 
      value=(h=1.5 f=swissb);
                              %if &combine=no %then 
     legend1 label= (f=swissb h=1.5  'Curve')
     value=(f=swissb h=1.5 j=l 'KM Curve' "&perc pct UCL" "&perc
pct  LCL");;
legend2 label=(f=swissb h=1.5) 
        value=(f=swissb h=1.5 j=l);
%if &combine=no %then %do;

/* gplot for separate curves */
        proc gplot;
          %if &cutoff ne none %then where &cutoff;;
        plot y*time= curve /
        legend=legend1
        vaxis=axis1 haxis=axis2
        %if &ci=no %then nolegend;;
        ;
        by &byvari;
        format curve curve.;
%end;
run;
 %if &combine=yes %then %do;
/* gplot for combined curves */
        proc gplot;
          %if &cutoff ne none %then where &cutoff;;
          plot y*time=&byvari/ legend=legend2
       vaxis=axis1 haxis=axis2;
          %end;
title &title;
run;
%mend kmplot;


******************************************************
/*The following macro code appears on page 55.       */
******************************************************

11.6  The KMPLAN Macro

%macro kmplan(
              acctime=        /*   accrual time, can be range */
              ,futime=        /*   post-accrual follow-up time, can
                                   be range */
              ,accrate=       /*   accrual rate, can be range */
              ,lossrate=0     /*   loss rate */
              ,s=.5           /*   assumed value of S(t) */
              ,t=             /*   time for which projected se is
                                   wanted */
) ;
data out;
/* define variables from arguments in macro */
     s = &s;
     t = &t;
     lossrate=&lossrate;
/* start loops for study parameters */
     do accrate = &accrate;
     do acctime = &acctime;
      do futime = &futime;
  /* calculate Peto standard error */
         x = 1;
         if t > futime then
          x = (acctime + futime - t)/acctime;
         n = accrate*acctime;
         stderr = sqrt(s*(1 - s)/(n*x*exp(-lossrate*t)));
         output;
      end;
   end;
end;
/* Create column labels */
label acctime = 'Accrual Time';
label futime = 'Follow-up Time';
label n = 'Sample Size';
label accrate = 'Accrual Rate';
label stderr = 'Projected Standard Error';
run;                              /* print with titles */
proc print noobs l;
     var accrate acctime futime n stderr;
     title 'Projected Standard Error (Peto) of Kaplan-Meier';
     title2 "Estimate of Survival at t = &t Assuming";
     title3 " S(&t) = &s and Loss Rate of &lossrate";
run;
%mend kmplan;



******************************************************
/*The following macro code appears on page 92.       */
******************************************************
          
11.1.  The LINRANK Macro


                   
%macro linrank(dataset=_last_, time=time, event=  ,
               censval=   ,groupvar= ,method=logrank,rho=1,
               stratvar= _none_, stratmis=no,trend=order );

/*       Delete invalid observations and 
         print list of observations deleted. */  

data xx deleted; 
     set &dataset;
     obsnumb = _n_;
     if &time <0  or &groupvar=''   or &event = . then delete=1;
     if "&stratvar" ne "_none_" and  "&stratmis" = "no"
     and  &stratvar = '' then delete =1;
     _none_ = 1;
     if delete=1 then output deleted;
     else output xx;
proc print data=deleted; 
     title 'Deleted Observations';
     var  obsnumb &time &event &groupvar
     %if "&stratvar" ne "_none_" %then &stratvar;;

/*       Determine number of groups, their names, 
         and the weights to use for trend test.   */ 

proc sort data = xx; 
     by &groupvar;
data y; 
     set xx; 
     by &groupvar;
     if first.&groupvar then do;
        n+1;
        call symput('ngrps',left(n));
     end;
run;
data grpnames; 
     set y; 
     by &groupvar;
     keep &groupvar n;
     if first.&groupvar;
data groupwts; 
     set grpnames;
     keep
     %if "&trend" = "order" %then n;
     %else &groupvar;;

/* Find number of strata */

proc sort data=xx; 
     by &stratvar;
data xx; 
     set xx;
     by &stratvar;
     retain stratn 0 ;
     if first.&stratvar then do;
          stratn+1;
          call symput('stratcnt', left(stratn));
     end;
run;

/*     Start loop on strata        */

%do ii = 1 %to &stratcnt;

/*    Form stratum subset, find number of 
      groups, number in each group, and      
      group weights in stratum               */

     data x; 
          set xx; 
          if stratn = &ii;
          call symput('stratval', &stratvar);
     run;
     proc freq; 
          table &groupvar/ noprint out= counts;
     proc sort data=x; 
          by &groupvar;
     data x; 
          set x;
          by &groupvar;
          retain grpn 0 ;
          if first.&groupvar then do;
                         grpn+1;
                call symput('grpcount', left(grpn));
                call symput('grpname'||left(grpn), &groupvar);
               end;
     run;
     data grpnames; 
          set x; 
          by &groupvar;
          keep &groupvar grpn;
          if first.&groupvar;
     data grpwts; 
          set grpnames;
          keep
          %if "&trend" = "order" %then grpn;
          %else &groupvar;;

/*    Create table         */

     proc sort data=x; 
          by descending &time;
     data y; 
          set x; 
          keep r1-r&grpcount rtot;
          array r{*} r1-r&grpcount;
          retain r1-r&grpcount rtot 0;
          %let countsq = %eval(&grpcount*&grpcount);
          r{grpn}+1;
          rtot+1;
     data x; 
          merge x y;
     proc sort; 
          by &time;
     data x; 
          set x; 
          by &time;
          array d{*} d1-d&grpcount;
          retain d1-d&grpcount dtot;
          if first.&time then do i=1 to &grpcount;
               d{i}=0;
               dtot=0;
               end;
          if &event not in (&censval) then do;
               d{grpn}+1;
               dtot+1;
               end;
          if last.&time then output;
     data x; 
          set x; 
          if dtot>0; 
          retain km km_  1; 
          all=1;
          array e{*} e1-e&grpcount;
          array diff{*} diff1-diff&grpcount;
          array r{*} r1-r&grpcount;
          array d{*} d1-d&grpcount;
          array wdiff{*} wdiff1-wdiff&grpcount;
          array s{*} sum1-sum&grpcount;
          array cov{&grpcount, &grpcount} cov1-cov&countsq;
          array sumcov{&grpcount,&grpcount}       sumcov1-sumcov&countsq;
          if _n_ = 1 then km_ = 1;
          else km_ = km;
          km=km*(rtot-dtot)/rtot;
          do j=1 to &grpcount;
               e{j} = dtot*r{j}/rtot;
               diff{j} = d{j} - e{j};
               if "&method"="logrank" then w=1;
               if "&method"="gehan" then w=rtot;
               if "&method"="tarone" then w=sqrt(rtot);
               if "&method"="harrington" then w=km_**&rho;
               wdiff{j} = w*diff{j};
               s{j} + wdiff{j};
          do l=1 to &grpcount;
                    if dtot=1 then c=1; else                     
                       c=(rtot-dtot)/(rtot-1);
                    if j=l then                                                
                       cov{j,l}=w**2*(dtot*(rtot*r{j}-r{j}**2)*c)/rtot**2;
                    else                     
                       cov{j,l}=-w**2*(r{j}*r{l}*dtot*c)/rtot**2;
                    sumcov{j,l}+cov{j,l};
                    end;
           end;

   /*       Sum over times and reformat for printout        */

     proc means sum noprint; 
          var d1-d&grpcount e1-e&grpcount diff1-diff&grpcount
          wdiff1-wdiff&grpcount;
          output out = out sum=;
     data out; 
     set out;
          array e{*} e1-e&grpcount;
          array d{*} d1-d&grpcount;
          array difff{*} diff1-diff&grpcount;
          array wdif{*} wdiff1-wdiff&grpcount;
          do j = 1 to &grpcount;
               group = j;
               events = d{j};
               expected = e{j};
               diff = difff{j};
               wdiff = wdif{j};
               output;
               end;
          label wdiff = 'Weighted Diff';
          label events = 'Events';
          label expected = 'Expected';
          label diff = 'Diff';
     data xxx; 
          merge out grpnames counts;
     proc print l noobs; 
          var &groupvar count percent events expected diff wdiff;
          sum  count events;
          title1 'Summary of Events vs Expected';
          %if "&stratvar" ne "_none_" %then title2 "&stratvar = &stratval";;
          title3 "Method = &method";
     run;

/*      Accumulate vectors and matrices for pooled stats  */

     %if "&ii" = "1" %then %do;
          data pooled; 
               set xxx; 
          %end;
     %else %do; 
          data pooled; 
          set pooled xxx; 
          %end;
     data x; 
          set x;
     proc sort; 
          by all;
     data s (keep = sum1-sum&grpcount) cov (keep =               
                 col1-col&grpcount);
          set x; 
          by all; 
          if last.all;
          array s{*} sum1-sum&grpcount;
          array sumcov{&grpcount, &grpcount}                   
                      sumcov1-sumcov&countsq;
          array col{*} col1-col&grpcount;
          output s;
          do j=1 to &grpcount;
               do l=1 to &grpcount;
                    col{l}=sumcov{j,l};
                    end;
          output cov;
          end;
     data yy; 
          merge grpnames cov;

                              /* Give columns of covariance matrix group names */
     %do j = 1 %to &grpcount;
          label col&j = "&&grpname&j";
          %end;
     proc print l noobs; 
          var &groupvar col1-col&grpcount;
          title1 'Covariance Matrix';
          %if "&stratvar" ne "_none_" %then title2 "&stratvar=
               &stratval";;
          title3 "Method = &method";
     %if "&ii" = "1" %then %do; 
          data poolcov; 
               set yy; 
          %end ;
     %else %do; 
          data poolcov; 
          set poolcov yy; 
          %end;

/*     Use proc iml to do matrix calculations 
       for test statistic.                       */  

     proc iml;
          reset noprint;
          use s;
          read all into x;
          use cov;
          read all into v;
          use grpwts;
          read all var _all_ into grpwts;

/*      Omit first row and column      */

          xx=x[1:1,2:&grpcount];
          vv=v[2:&grpcount,2:&grpcount];
          stat= xx*inv(vv)*xx`;
          df = &grpcount - 1;
          p_val = 1-probchi(stat,df);
          results = stat||df||p_val;
          cols={ChiSquare df p_value};
          title1 ' ';
          %if "&stratvar" ne "_none_" %then title1 "&stratvar=
               &stratval";;
          title2 "Method = &method";
          print results[colname=cols];

/*     Test for trend.        */

          if %eval(&grpcount) > 2 then do;
               wts=grpwts[2:&grpcount, 1:1];
               xxx=xx*wts;
               vvv=wts`*vv*wts;
               stat = xxx*xxx/vvv;
               df=1;
               p_val= 1-probchi(stat,df);
               trend = stat||df||p_val;
               print trend[colname=cols];
               end;
          quit;
     %end; 

 /* end of loop on strata */

/*     Pooled results if stratified analyis   */

%if "&stratvar" ne "_none_" %then %do;
     proc freq data=xx;
          table &groupvar / noprint out=counts;
     proc sort data=pooled; 
          by &groupvar;
     proc means noprint sum data=pooled; 
          var count events expected diff wdiff;
          by group; 
          output out=pooled1 sum=;
     data; 
          merge pooled1 grpnames counts;
     proc print l noobs; 
            var &groupvar count percent events expected diff wdiff;
          sum count events;
          title1 'Summary of Events vs Expected';
          title2 "Pooled Over All Values of &stratvar";
     proc sort data=poolcov; 
          by &groupvar;
     proc means noprint sum data=poolcov;
          var col1-col&ngrps;
          by &groupvar; 
          output out=pooled2 sum=;
     proc print l noobs; 
          var &groupvar col1-col&ngrps;
          title1 'Covariance Matrix';
          title2 "Pooled Over All Values of &stratvar";
     data pooled2; 
          set pooled2; 
          keep col1-col&ngrps;
     run;
     proc iml;
          reset noprint;
          use pooled1;
          read all var {wdiff} into x;
          use pooled2;
          read all into v;
          xx=x[2:&ngrps,1:1];
          vv=v[2:&ngrps,2:&ngrps];
          stat = xx`*inv(vv)*xx;
          df = &ngrps - 1;
          p_val=1-probchi(stat,df);
          cols={ChiSquare df p_value};
          title1 'Pooled Results';
          title2 "Method = &method";
          results = stat||df|| p_val;
          print results[colname=cols];

/*     Test for trend.         */

          if %eval(&ngrps) > 2 then do;
               use groupwts;
               read all var _all_ into weights;
               wts = weights[2:&ngrps, 1:1];
               xtrend = xx`*wts;
               vtrend = wts`*vv*wts;
               stattrnd = xtrend**2/vtrend;
               p_valtrd = 1-probchi(stattrnd,1);
               df=1;
               trend=stattrnd||df||p_valtrd;
               print trend[colname=cols];
               run;
               end;
     %end;
%mend;


******************************************************
/*The following macro code appears on page 100.      */
******************************************************


11.3  The MANTBYAR Macro
         
%macro mantbyar(dataset= last_ , state= , time=time ,nstates=2 ,                 
                format= default.,id=id);

/* Create Format for States */

%let form=%str(proc format; value default 1='state1'); 
%do i=2 %to &nstates; 
     %let form=&form &i= %str(%')STATE&i %str(%'); 
     %end; 
&form; 

/* Create Table */

proc sort data= &dataset; 
     by &id &time; 
data d; 
     set &dataset end=last; 
     by &id; 
     retain id 0; 
     if first.&id then id+1; 
     if last then call symput('nobs',left(id)); 
proc sort; 
     by &time descending &state; 
%let nstat2=%eval(&nstates*&nstates); 
%let nm1=%eval(&nstates-1); 
data dd; 
     set d; 
     by &time descending &state; 
     retain s1-s&nobs r1-r&nstates o1-o&nstates; 
     retain e1-e&nstates 0; 
     retain v1-v&nstat2 0; 
     retain d1-d&nstates 0; 
     array s(*) s1-s&nobs; 
     array r(*) r1-r&nstates; 
     array e(*) e1-e&nstates;
     array o(*) o1-o&nstates; 
     array ot(*) ot1-ot&nstates; 
     array v(&nstates,&nstates) v1-v&nstat2; 
     array d(*) d1-d&nstates; 
     if &time=0 then do; 
          s(id)=&state; r(&state)+1; 
          nt+1; 
          end; 
     if &time>0 and &state<&nstates+1 then do; 
          prior=s(id); 
          r(prior)+(-1); 
          if &state>0 then r(&state)+1; s(id)=&state; 
          if &state=0 then nt+(-1); 
          end; 
     if &state=&nstates+1 then do; 
          if first.&state then do i=1 to &nstates; 
               ott=0; 
               ot(i)=0; 
               end; 
          prior=s(id); 
          ot(prior)+1; 
          ott+1; 

/* Calculate covariance matrix */

          if last.&state then do; 
                  do i=1 to &nstates; 
                      do j= 1 to &nstates; 
                       if i=j then v(i,i)+r(i)*(nt-r(i))*ott*(nt-ott)/(nt**2*(nt-1));
                       else v(i,j)+(-r(i)*r(j)*ott*(nt-ott)/(nt**2*(nt-1))); 
                       end; 
                  end; 
                      do i=1 to &nstates; 
                         e(i)+r(i)/nt*ott; 
                         r(i)+(-ot(i)); 
                         o(i) + ot(i);
                                   d(i)+ (o(i)-e(i)); 
                                  end; 
                    nt+(-ott); 
                    output; 
               end;
                end; 
data ddd; 
     set dd end=last; 
     array e(*) e1-e&nstates; 
     array o(*) o1-o&nstates; if last; 
     df=&nstates-1; 
     do &state=1 to &nstates; 
          expected=e(&state); observed=o(&state);                     
              ratio=observed/expected; 
          diff=observed-expected; 
          output; 
          end; 
data cov; 
     set ddd;
     keep v1-v&nstat2; 
     %let slist=; 
     %do i=1 %to &nstates; 
          data _null_ ; 
               call symput('s', put(&i,&format)); 
          run; 
          %let slist= &slist &s ; 
          %end; 
data exp ; 
     set ddd;
     keep e1-e&nstates; 
data obs; 
     set ddd; 
     keep o1-o&nstates; 

/* Use IML to calculate test statistic and print results */

proc iml; 
     use cov; 
     read into covmat; 
     cov=shape(covmat,&nstates); 
     statlist={&slist};
     tranlist=statlist'; 
     use exp; 
     read into expmat; 
     print 'Covariance Matrix'; 
     print cov[r=tranlist c=statlist format=10.4]; 
     v=diag(cov); 
     use obs; 
     read into obsmat; 
     rmat=obsmat#expmat##(-1); 
     r=rmat';
     difmat=obsmat-expmat;    
     d=difmat';
     obs=obsmat'; exp=expmat'; 
     z=difmat*inv(v##(.5)); 
     p=(1-probnorm(abs(z)))'; p=2*p; 
     state =obs||exp||r||d||p;
     top={'Observed' 'Expected' 'O/E' 'O-E' 'P-Value'}; 
     print 'Summary of Results for Each State'; 
     print state[r=tranlist c=top format=12.4]; 
     cov=cov[1:&nm1,1:&nm1]; 
     expmat =expmat[1,1:&nm1]; 
     obsmat=obsmat[1,1:&nm1]; 
     chisq=(expmat-obsmat)*inv(cov)*(expmat-obsmat)'; 
     print 'Test of Homogeneity of States'; 
     p=1-probchi(chisq,&nm1); 
     df=&nm1; 
     print chisq [format=11.4] df [format=5.0] p [format=8.4] ; 
%mend mantbyar; 


          


**************************************************
/*The following macro code appears on page 174.  */
**************************************************

          
18.1  The PARAMEST Macro 

%macro paramest(dataset = _last_, t1=t1, t2=t2, covs=none,
                          method = 2,
                hazard =   , survival =  ,init= , alpha = 0.05,
                lower = {. . . . . . . . . .}, 
                upper = {. . . . . . . . . .},
                pred = x, censval = {0});

/*Remove Observations with Time Values That Are Not Permissable*/

data checked; 
     set &dataset; 
     if &method=1 and ((&t1 = . and &t2 = .) or &t1 > &t2 
              or . < &t1 < 0 or . < &t2 < 0) then delete;
     if &method=2 and (&t1 < 0 or &t2 = . ) then delete;

/* to get rid of previous datasets */

data survival; 
     set _null_;
data x; 
     set _null_;

proc iml;
b = &upper;
     a = &lower;
     con = a//b;
     use checked;
     %if &covs = none %then
            %str(read all var {&t1 &t2} into vars;);
     %else %str(read all var {&t1 &t2 &covs} into vars;);
     nvars = ncol(vars);
     ncovs = nvars - 2;
     nobs = nrow(vars);
     times = vars[, 1:2];

/*  convert to method 1 for time and censoring data */

if &method = 2 then do i=1 to nobs;
   if sum((times[i,2] = &censval)) >0 then times[i,2] = .;
   else times[i,2] = times[i,1];
   end;

/* module to calculate log likelihood  */

     start loglik(theta) global (times,vars,nobs,nvars);
     LL=0;
     do i=1 to nobs;
   /*  get covariates  */

          if nvars > 2 then x = vars[i,3:nvars];

   /*  right censored time */

          if (times[i,1] ^= .) & (times[i,2] = . ) then do;
          t = times[i,1];
          LL = LL + log(&survival);
          end;

   /* left censored time */

     if (times[i,1] = .) & (times[i,2] ^= .) then do;
          t = times[i,2];
          LL = LL + log(1 - (&survival));
          end;

   /* interval censored time */

     if (times[i,1] ^= .) & (times[i,2] > times[i,1]) then do;
          t = times[i,1];
          temp = &survival ;
          t = times[i,2];
          y = temp - (&survival) ;
          LL = LL + log(y);
          end;

   /* uncensored time */

     if times[i,1] = times[i,2] then do;
                t=times[i,1];
                LL = LL + log(&hazard) + log(&survival);
                end;
     end;
     return(LL);
     finish loglik;
     theta0= &init`;
     nparams = ncol(&init);
     con = con[, 1:nparams];
     optn = {1 0};

/*  call optimization function */

     call nlptr(rc,thetares,"loglik",theta0,optn,con,,,,,);
     thetaopt=thetares`;
     maxll=loglik(thetaopt);

/*  rc is return code  - negative means failed to converge  */

     if rc < 0 then
     print "Iteration failed to converge.  Estimates are    unreliable.";
     if rc > 0 then do;
          print "Successfull Convergence";
          print maxll " Is Maximum Loglikelihood.";
          end;

/* module to calculate first derivs (deriv) and second derivs (h)*/

     call nlpfdd(LL,deriv,h,"loglik", thetaopt);

/* get covariance matrix and standard errors of estimates */

     cov = -inv(h);
     setheta=sqrt(vecdiag(cov));
     theta=thetaopt;
     use &pred;
     read all var _all_ into values;
     n = nrow(values);
     survival = j(1,n,0);
     sesurv = j(1,n,0);
     covplus1 = ncovs + 1;

/* calculate survival function for t and covariates in pred
dataset, as well as statndard error using delta method */

     do i = 1 to n;
          if ncovs > 0 then x = values[i,2:covplus1];
          t = values[i,1];
          start surv(theta) global (i, t, x);
          surv = &survival;
          return(surv);
          finish surv;
          call nlpfdd(s,deriv,hess,"surv", theta);
          survival[i] = s;
          sesurv[i] = sqrt(deriv*cov*deriv`);
          end;
     survival = survival`;
     sesurv = sesurv`;
     create thetas from theta[colname = 'theta'];
     append from theta;
     create setheta from setheta[colname = 'stderr'];
     append from setheta;
     create cov from cov;
     append from cov;
     create survival from survival[colname = 'survival'];
     append from survival;
     create sesurv from sesurv[colname = 'stderr'];
     append from sesurv;
data thetas; 
     merge thetas setheta;
     c = probit(1 - &alpha/2);

/*  (1 - alpha)100% CI */

     lower = theta - stderr*c;
     upper = theta + stderr*c;
proc print data = thetas; 
     var theta stderr lower upper;
     title 'Parameter Estimates';
run;
proc means noprint n data = cov;
    var col1;
    output out = out n = nparams;
run;
data; 
     set out;
     call symput('n', nparams);
run;
                              data names;
%do i = 1 %to &n;
     name = "theta&i";
     output;
     %end;
run;

data cov; 
merge names cov;
proc print data= cov noobs label ;
%do i = 1 %to &n;
     label col&i = "theta&i";
     %end;
     label name = 'Cov';
     title 'Estimated Covariance Matrix';
run;

/* merge survival estimates and stderrors with pred dataset */

data table; 
     merge &pred survival sesurv ;
proc print data = table noobs;
     title 'Estimated Survival Probabilities';
run;
%mend;


**************************************************
/*The following macro code appears on page 139.  */
**************************************************
 
11.3  The  PHPLOT Macro

%macro phplot(data =     , ci=no, yvar=survival, 
               ylabel=Pct Survival, byvar= none,
               xvar=time,xlabel=Time,combine=no,
               title='Proportional Hazards Survival Curve',
               lcl=lcl, ucl = ucl );

/* Symbol statements for up to 4 curves on one graph */

%if &combine=yes %then %do;
     %let ci=no;
     symbol1 l=1  v=none  i=stepjl w=5;
     symbol2 l=3 v=none i=stepjl w=5;
     symbol3 l=5 v=none i=stepjl w=5;
     symbol4 l=33 v=none i=stepjl w=5;
     %end;

/* Symbol Statements for separate graphs */

%if &combine=no %then %do;
     symbol1 l=1  v= none i=stepjl w=5;
     symbol2 l=3 v=none i=stepjl w=5;
     symbol3 l=3 v=none i=stepjl w=5;
     %end;

%if &byvar=none %then goptions cby=white;;
data; 
     set &data; 
     survival=&yvar*100;
     lcl=100*&lcl;
     ucl=100*&ucl;
     y=survival; 
     curve=1; 
     output;
     y=ucl; 
     curve=2;
     %if &ci=yes %then output;;
     y=lcl; 
     curve=3;
     %if &ci=yes %then output;;
proc sort; 
     by &byvar curve &xvar;
run;
proc format;
value curve 1='PH curve' 
              2='UCL' 
              3='LCL';
axis1 width=5 minor=none label=(h=2 f=swiss a=90 j=center           
   "&ylabel")value=(h=1.5 f=swiss) order=(0 to 100 by 10);
axis2 width=5 label=(h=2 f=swiss  "&xlabel") value=(h=1.5           
    f=swiss);
%if &combine=no %then legend1 label=(f=swiss h=1.5  'Curve')
                              value=(f=swiss h=1.5 j=l 
                              'PH Curve' "UCL" "LCL");;
legend2 label=(f=swiss h=1.5) value=(f=swiss h=1.5 j=l);

/* PROC GPLOT for separate graphs */

%if &combine=no %then %do;
     proc gplot;
        plot y*&xvar= curve /
        legend=legend1
        vaxis=axis1 haxis=axis2
        %if &ci=no %then nolegend;;
        ;
        by &byvar;
        format curve curve.;
        %end;

/* PROC GPLOT for combined graphs */

%if &combine=yes %then %do;
     proc gplot;
        plot y*&xvar=&byvar/ legend=legend2
        vaxis=axis1 haxis=axis2;
        %end;
title &title;
run;
%mend phplot;


**************************************************
/*The following macro code appears on page 140.  */
**************************************************

11.4  The PHPOW Macro


/*  This is a macro for calculating the sample size needed for a
    proportional hazards regression with two dichotomous
          covariates, x1 and x2.  x1 is the covariate of interest and
       x2 is the confounder.  The macro is based on Lui, Controlled
     Clinical Trials, 13:446-458(1992) */

%macro phpow(p00=  ,
             p01= ,
             p10=  ,
             s00= ,
             t00= ,
             s01= ,
             t01= ,
             s10= ,
             t10= ,
             t= ,
             tau=  ,
             alpha= .05  ,
             power= , n= );
data;
/* Convert from macro variables to numeric */
      alpha = symget('alpha') + 0;
      power = symget('power') + 0;
      n=symget('n');
      p00 = symget('p00') + 0;
      p01 = symget('p01') + 0;
      p10 = symget('p10') + 0;
      t = symget('t') + 0;
      tau = symget('tau') + 0;
      s00 = symget('s00') + 0;
      s01 = symget('s01') + 0;
      t00 = symget('t00') + 0;
      t01 = symget('t01') + 0;
      s10 = symget('s10') + 0;
      t10 = symget('t10') + 0;
/* Calculate other values that are needed */
      zalpha = -probit(alpha/2);
      zbeta = probit(power);
      p11 = 1-p00-p01-p10;
      lambda = -log(s00)/t00;
      b1 = log(-log(s10)/(lambda*t10));
      b2 = log(-log(s01)/(lambda*t01));
      t0=t+tau;
      p0plus = p00+p01;
      p1plus = 1-p0plus;
      pplus0 = p10+p00;
     pplus1 = 1-pplus0;
      phi = (p11*p00-p10*p01)/sqrt(p1plus*p0plus*pplus1*pplus0);

/*  Using formula 3, page 448 and formula 5, 449 */
/*  Alternative b1 */

      a1=(1+(exp(-lambda*t0)-exp(-lambda*tau))/(lambda*t))*p00+
         (1+(exp(-lambda*t0*exp(b1))-exp(-lambda*tau*exp(b1)))/
         (lambda*t*exp(b1)))*p10+
         (1+(exp(-lambda*t0*exp(b2))-exp(-lambda*tau*exp(b2)))/
         (lambda*t*exp(b2))*p01+
         (1+(exp(-lambda*t0*exp(b1+b2))-exp(-lambda*tau*exp(b1+b2)))/
         (lambda*t*exp(b1+b2)))*p11);
/* Null hypothesis b1 = 0 */
      a0=(1+(exp(-lambda*t0)-exp(-lambda*tau))/(lambda*t))*p00+
         (1+(exp(-lambda*t0)-exp(-lambda*tau))/(lambda*t))*p10+
         (1+(exp(-lambda*t0*exp(b2))-exp(-lambda*tau*exp(b2)))/
         (lambda*t*exp(b2)))*p01+
         (1+(exp(-lambda*t0*exp(b2))-exp(-lambda*tau*exp(b2)))/
         (lambda*t*exp(b2)))*p11;
/*  Under alternative b1 */
      q00=(1+(exp(-lambda*t0)-exp(-lambda*tau))/(lambda*t))/a1*p00;
      q10=(1+(exp(-lambda*t0*exp(b1))-exp(-lambda*tau*exp(b1)))/
      (lambda*t*exp(b1)))
          /a1*p10;
      q01=(1+(exp(-lambda*t0*exp(b2))-exp(-lambda*tau*exp(b2)))/
          (lambda*t*exp(b2)))/a1*p01;
      q11=(1+(exp(-lambda*t0*exp(b1+b2))-exp(-lambda*tau* exp(b1+b2)))
          /(lambda*t*exp(b1+b2)))/a1*p11;
      q0plus=q00+q01;
      q1plus=q10+q11;
      qplus0=q10+q00;
      qplus1=q01+q11;
      phistar=(q11*q00-q10*q01)/sqrt(q1plus*q0plus*qplus1*qplus0);
      v1=(a1*q1plus*(1-q1plus)*(1-phistar**2))**(-1);
/*  Under null hypothesis, b1 = 0  */
      q00=(1+(exp(-lambda*t0)-exp(-lambda*tau))/(lambda*t))/a0*p00;
      q10=(1+(exp(-lambda*t0)-exp(-lambda*tau))/(lambda*t))/a0*p10;
      q01=(1+(exp(-lambda*t0*exp(b2))-exp(-lambda*tau*exp(b2)))/
          (lambda*t*exp(b2)))/a0*p01;
      q11=(1+(exp(-lambda*t0*exp(b2))-exp(-lambda*tau*exp(b2)))/
          (lambda*t*exp(b2)))/a0*p11;
      q0plus=q00+q01;
      q1plus=q10+q11;
      qplus0=q10+q00;
      qplus1=q01+q11;
      phistar=(q11*q00-q10*q01)/sqrt(q1plus*q0plus*qplus1*qplus0);
      v0=(a0*q1plus*(1-q1plus)*(1-phistar**2))**(-1);
      if n=. then n=int((zalpha*sqrt(v0)+zbeta*sqrt(v1))**2/b1**2)+1;
      if power= . then power=probnorm((sqrt(n*b1**2)-alpha*sqrt(v0))/sqrt(v1));
proc print;
      var p00 p01 p10 p11 b1 b2 alpha power n;
run;
%mend;

%phpow(p00=0.35       /* Proportion with x1=0, x2=0 */
      ,p01=0.15       /* Proportion with x1=0, x2=1  */
      ,p10=0.35       /* Proportion with x1=1, x2=0 */
      ,s00=0.5        /* A survival probability for
                       x1=x2=0 */
      ,t00=3          /* The time associated with s00 */
      ,s01=0.7        /* A survival probability for x1=0,
                       x2=1 */
      ,t01=3          /* The time associated with s01 */
      ,s10=0.65       /* A survival probability for x1=1,
                       x2=0 */
      ,t10=3          /* The time associated with s10 */
      ,t=5            /* Accrual time */
      ,tau=3          /* Post accrual follow-up */
      ,power=0.8      /* Power of test. (optional)*/
      ,n=             /* Sample Size.  (optional) Note:  power
                       or n but not both, must be given */
);


******************************************************
/*The following macro code appears on page 97.       */
******************************************************
          
11.2  The SURVPOW Macro
         
%macro survpow(s1=  , s2=   , nsub=365, actime= ,futime=  ,rate=  ,
       p=.5, loss1=0, loss2=0, w=1,siglevel=.05) ;

/* Find number of points in data set for group 1 and convert to     
 vectors */

data _null_; 
     set &s1;
     i=_n_;
     call symput('counta',left(i));
run;
data y; 
     set &s1; 
     retain sa1-sa&counta ta1-ta&counta ;
     array surv{*} sa1-sa&counta;
     array ttime{*} ta1-ta&counta;
     t=t*&nsub;
     all=1;
     i=_n_;
     surv{i}=s; 
     ttime{i}=t; 
     output;
proc sort; 
     by all;
data y; 
     set y; 
     by all; 
     if last.all;
     keep  all ta1-ta&counta sa1-sa&counta;

/*  Find number of points in data set for group 2 and convert to    
  vector */

data _null_; 
     set &s2;
     i=_n_;
     call symput('countb', left(i));
run;
data yy; 
     set &s2; 
     retain sb1-sb&countb tb1-tb&countb;
     array surv{*} sb1-sb&countb;
     array ttime{*} tb1-tb&countb;
     t=t*&nsub;
     all=1;
     i=_n_;
     surv{i}=s; ttime{i}=t; 
     output;
proc sort; 
     by all;
data yy; 
     set yy; 
     by all; 
     if last.all;
     keep  all tb1-tb&countb sb1-sb&countb;

/*  Find hazards at each partition point  */

data z; 
     all=1;
     do t=0 to (&actime+&futime)*&nsub;
          output; 
          end;
proc sort; 
     by all;
data merged; 
     merge z y yy; 
     by all;
     if trim("&counta") = "1" then lam1=-log(sa1)/ta1;
     %do i=1 %to &counta -1 ;
        %let j = %eval(&i+1);
        if ta&i le t lt ta&j then lam1 =
               (sa&i-sa&j)/((sa&j-sa&i)*(t-ta&i)+sa&i*(ta&j-ta&i));
     %end;
     if trim("&counta") = "2" and ta2 = . then do;
        lambda = -log((sa1-sa2)/(1-sa2))/ta1;
        lam1 = lambda*(1-sa2)*exp(-lambda*t)/                  
               (sa2+(1-sa2)*exp(-lambda*t));
        end;
     if trim("&countb") = "1" then lam2=-log(sb1)/tb1;
     %do i=1 %to &countb -1 ;
          %let j = %eval(&i+1);
          if tb&i le t lt tb&j then lam2 =
          (sb&i-sb&j)/((sb&j-sb&i)*(t-tb&i)+sb&i*(tb&j-tb&i));
     %end;

/*  Calculate ratio of hazards and number at risk at each           
  partition point and accumulate needed sums */

data; 
     set merged;  
     by all;
     retain n1 n2 n;
     if _n_ = 1 then do;
        n1=&rate*&p*&actime;
        n2=&rate*(1-&p)*&actime;
        n=n1+n2;
     end;
     tau=&futime*&nsub;
     psi1=&loss1/&nsub;
     psi2=&loss2/&nsub;
     phi=n1/n2;
     theta=lam1/lam2;
     d1=lam1*n1;
     d2=lam2*n2;
     d=d1+d2;
     c1=psi1*n1;
     c2=psi2*n2;
     if _n_>tau then do;
        c1=c1+n1/(&actime*&nsub+tau-_n_+1);
        c2=c2+n2/(&actime*&nsub+tau-_n_+1);
        end;
     n1=n1-d1-c1;
     n2=n2-d2-c2;
     sum1+(d*&w*(phi*theta/(1+phi*theta)-phi/(1+phi)));
     sum2+d*&w**2*phi/(1+phi)**2;
     n=n1+n2;

/*  Calculate e and power */

     if last.all then do;
              e=sum1/sqrt(sum2);
              z=-probit(&siglevel/2);
              power=1-probnorm(z-e)+probnorm(-z-e);
              ac_time=symget('actime');
              fu_time=symget('futime');
              ac_rate=symget('rate');
              n=ac_rate*ac_time;
              alpha=symget('siglevel');
              prop=symget('p');
              los_rat1=symget('loss1');
              los_rat2=symget('loss2');
              weights=symget('w');
              output;
        end;
     label ac_time='Accrual Time';
     label power='Power';
     label fu_time='Follow-up Time';
     label ac_rate='Accrual Rate';
     label n='N';
     label prop='Prop in Grp 1';
     label los_rat1='Loss Rate 1';
     label los_rat2='Loss Rate 2';
     label weights='Weights';

/*  Print results */

proc print l noobs;
     var ac_time fu_time ac_rate n alpha prop los_rat1 los_rat2  weights power;
%mend;
           


